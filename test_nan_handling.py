import pandas as pd
import numpy as np

def format_field_value(value) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è NaN –∑–Ω–∞—á–µ–Ω–∏—è.
    
    Args:
        value: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è NaN
    """
    if pd.isna(value):
        return ""
    return str(value)

# –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
test_values = [
    "–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É",  # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    "",                   # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    None,                 # None
    np.nan,              # NaN
    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ" # –î—Ä—É–≥–æ–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
]

print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ NaN –∑–Ω–∞—á–µ–Ω–∏–π:")
print("=" * 50)

for i, value in enumerate(test_values):
    result = format_field_value(value)
    print(f"Test {i+1}: {repr(value)} -> '{result}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª—è NaN –∑–Ω–∞—á–µ–Ω–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    if pd.isna(value):
        assert result == "", f"Expected empty string for NaN value, got '{result}'"
        print("  ‚úÖ NaN –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞")
    else:
        # –î–ª—è –Ω–µ-NaN –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        assert isinstance(result, str), f"Expected string result, got {type(result)}"
        print("  ‚úÖ –û–±—ã—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É"))

print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
print("NaN –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ–ª–µ '–í—ã–ø–æ–ª–Ω–∏—Ç—å' –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–æ 'nan'")
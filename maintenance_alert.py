from turtle import color
import pandas as pd
from datetime import datetime, timedelta
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.image import MIMEImage
from pathlib import Path
import sys
import json
import matplotlib.pyplot as plt
from typing import Dict, List, Tuple, Optional, Any
try:
    import xlwings as xw
    XLWINGS_AVAILABLE = True
except ImportError:
    XLWINGS_AVAILABLE = False
    print("‚ö†Ô∏è xlwings –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –§–æ—Ä–º—É–ª—ã Excel –º–æ–≥—É—Ç –Ω–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ xlwings: pip install xlwings")

# –í–µ—Ä—Å–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
VERSION = "1.3.0"
RELEASE_DATE = "09.09.2025"
PROGRAM_DIR = Path(__file__).parent.absolute()
DATA_DIR = PROGRAM_DIR / "data"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
EXCEL_FILENAME = "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –ü–ö –∏ —à–∫–∞—Ñ–æ–≤ –ê–°–£–¢–ü.xlsx"
HISTORY_FILE = DATA_DIR / "maintenance_alert_history.json"

# SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
SMTP_SERVER = "mgd-ex1.pavlik-gold.ru"
SMTP_PORT = 25
SENDER_EMAIL = "maintenance.asutp@pavlik-gold.ru"

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
RECIPIENTS = [
    "asutp@pavlik-gold.ru",
    # "ochkur.evgeniy@pavlik-gold.ru",
    # "dorovik.roman@pavlik-gold.ru",
]

# –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ Excel
COLUMN_NAMES = [
    "‚Ññ", "–û–±—ä–µ–∫—Ç", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ", "–ú–µ—Å—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è",
    "–†–∞–±–æ—Ç—ã", "–ò–Ω—Ç–µ—Ä–≤–∞–ª –¢–û (–¥–Ω–µ–π)", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–∑–∞ –¥–Ω–µ–π)", "–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¢–û",
    "–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¢–û", "–°—Ç–∞—Ç—É—Å"
]

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–∏—Å—Ç–æ–≤ Excel
SHEETS_CONFIG = {
    "–ü–ö –ê–°–£ –¢–ü": {"range": "A4:K300"},
    "–®–∫–∞—Ñ—ã –ê–°–£ –¢–ü": {"range": "A4:K300"}
}

# –°—Ç–∞—Ç—É—Å—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
MAINTENANCE_STATUSES = ["–û–ë–°–õ–£–ñ–ò–¢–¨", "–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"]


def get_excel_file_path() -> Path:
    """
    –ò—â–µ—Ç Excel-—Ñ–∞–π–ª —Å–Ω–∞—á–∞–ª–∞ –≤ –ø–∞–ø–∫–µ —Å–∫—Ä–∏–ø—Ç–∞, –∑–∞—Ç–µ–º —É—Ä–æ–≤–Ω–µ–º –≤—ã—à–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å (–¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω).
    """
    primary = PROGRAM_DIR / EXCEL_FILENAME
    if primary.exists():
        return primary
    fallback = PROGRAM_DIR.parent / EXCEL_FILENAME
    if fallback.exists():
        return fallback
    # –ï—Å–ª–∏ –Ω–∏–≥–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –≤ –ø–∞–ø–∫–µ —Å–∫—Ä–∏–ø—Ç–∞ (–¥–ª—è –ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏)
    return primary


EXCEL_FILE = get_excel_file_path()


def show_version():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print(f"üîß –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ v{VERSION}")
    print(f"üìÖ –î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞: {RELEASE_DATE}")
    print(f"üêç Python: {sys.version.split()[0]}")
    print("=" * 60)


def load_config() -> Dict[str, Any]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π.
    """
    try:
        if HISTORY_FILE.exists():
            with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
                config = json.load(f)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
                return _validate_config_structure(config)
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            return _create_default_config()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return _create_default_config()


def _validate_config_structure(config: Dict[str, Any]) -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    if 'maintenance_history' not in config:
        config['maintenance_history'] = []
    if 'last_update' not in config:
        config['last_update'] = None
    if 'version' not in config:
        config['version'] = VERSION
    return config


def _create_default_config() -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    config = {
        "maintenance_history": [],
        "last_update": None,
        "version": VERSION
    }
    save_config(config)
    return config


def save_config(config: Dict[str, Any]) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ JSON —Ñ–∞–π–ª.
    
    Args:
        config: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    try:
        config['last_update'] = datetime.now().isoformat()
        config['version'] = VERSION
        with open(HISTORY_FILE, 'w', encoding='utf-8') as f:
            json.dump(config, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {HISTORY_FILE}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")


def update_maintenance_statistics(alarm_items: List[pd.DataFrame], 
                                warning_items: List[pd.DataFrame], 
                                total_records: int, 
                                status_counts: Dict[str, int]) -> Dict[str, Any]:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
    –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ—ë.
    
    Args:
        alarm_items: –°–ø–∏—Å–æ–∫ DataFrame —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –°–†–û–ß–ù–û
        warning_items: –°–ø–∏—Å–æ–∫ DataFrame —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –í–Ω–∏–º–∞–Ω–∏–µ
        total_records: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        status_counts: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    
    Returns:
        –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    """
    config = load_config()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    now = datetime.now()
    today = now.date()
    today_str = today.isoformat()
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–∞ {today.strftime('%d.%m.%Y')}...")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—Å–ª—É–∂–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (—Å—Ç–∞—Ç—É—Å "–í –Ω–æ—Ä–º–µ")
    ok_count = status_counts.get('–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è', 0)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    maintenance_record = {
        "date": today_str,
        "total_equipment": total_records,
        "ok": ok_count,
        "urgent": status_counts.get('–û–ë–°–õ–£–ñ–ò–¢–¨', 0),
        "warning": status_counts.get('–í–Ω–∏–º–∞–Ω–∏–µ', 0),
        "timestamp": now.isoformat()
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today_record_index = None
    for i, record in enumerate(config['maintenance_history']):
        if record['date'] == today_str:
            today_record_index = i
            break
    
    try:
        if today_record_index is not None:
            # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            print(f"üìù –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –∑–∞ {today.strftime('%d.%m.%Y')}...")
            config['maintenance_history'][today_record_index] = maintenance_record
            action = "–æ–±–Ω–æ–≤–ª–µ–Ω–∞"
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            print(f"üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∑–∞ {today.strftime('%d.%m.%Y')}...")
            config['maintenance_history'].append(maintenance_record)
            action = "–¥–æ–±–∞–≤–ª–µ–Ω–∞"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 120 –∑–∞–ø–∏—Å—è–º–∏
        if len(config['maintenance_history']) > 120:
            config['maintenance_history'] = config['maintenance_history'][-100:]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        save_config(config)
        
        print(f"‚úÖ –ó–∞–ø–∏—Å—å –∑–∞ {today.strftime('%d.%m.%Y')} {action}: {ok_count} –æ–±—Å–ª—É–∂–µ–Ω–æ")
        return config
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return config


def _compute_period_boundaries(base_date: datetime.date) -> Dict[str, datetime.date]:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    
    Args:
        base_date: –ë–∞–∑–æ–≤–∞—è –¥–∞—Ç–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –ø–µ—Ä–∏–æ–¥–æ–≤
    """
    yesterday_local = base_date - timedelta(days=1)
    day_before_yesterday_local = yesterday_local - timedelta(days=1)
    week_start_local = base_date - timedelta(days=base_date.weekday())
    last_week_start_local = week_start_local - timedelta(days=7)
    last_week_end_local = week_start_local - timedelta(days=1)
    prev_prev_week_start_local = last_week_start_local - timedelta(days=7)
    prev_prev_week_end_local = last_week_start_local - timedelta(days=1)
    month_start_local = base_date.replace(day=1)
    last_month_end_local = month_start_local - timedelta(days=1)
    last_month_start_local = last_month_end_local.replace(day=1)
    prev_prev_month_end_local = last_month_start_local - timedelta(days=1)
    prev_prev_month_start_local = prev_prev_month_end_local.replace(day=1)
    
    return {
        "yesterday": yesterday_local,
        "day_before_yesterday": day_before_yesterday_local,
        "week_start": week_start_local,
        "last_week_start": last_week_start_local,
        "last_week_end": last_week_end_local,
        "prev_prev_week_start": prev_prev_week_start_local,
        "prev_prev_week_end": prev_prev_week_end_local,
        "month_start": month_start_local,
        "last_month_start": last_month_start_local,
        "last_month_end": last_month_end_local,
        "prev_prev_month_start": prev_prev_month_start_local,
        "prev_prev_month_end": prev_prev_month_end_local,
    }


def _aggregate_raw_field(history_records: List[Dict], 
                        today_local: datetime.date, 
                        bounds: Dict[str, datetime.date], 
                        extract_value) -> Dict[str, int]:
    """
    –ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º.
    
    Args:
        history_records: –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π
        today_local: –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
        bounds: –ì—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–∏–æ–¥–æ–≤
        extract_value: –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∑–∞–ø–∏—Å–∏
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    raw = {
        "today": 0,
        "yesterday": 0,
        "day_before_yesterday": 0,
        "this_week": 0,
        "last_week": 0,
        "week_before_last": 0,
        "this_month": 0,
        "last_month": 0,
        "month_before_last": 0,
    }
    
    for record in history_records:
        record_date = datetime.fromisoformat(record['date']).date()
        value = extract_value(record)
        
        if record_date == today_local:
            raw["today"] = value
        elif record_date == bounds["yesterday"]:
            raw["yesterday"] = value
        elif record_date == bounds["day_before_yesterday"]:
            raw["day_before_yesterday"] = value
        elif bounds["week_start"] <= record_date <= today_local:
            raw["this_week"] = max(raw["this_week"], value)
        elif bounds["last_week_start"] <= record_date <= bounds["last_week_end"]:
            raw["last_week"] = max(raw["last_week"], value)
        elif bounds["prev_prev_week_start"] <= record_date <= bounds["prev_prev_week_end"]:
            raw["week_before_last"] = max(raw["week_before_last"], value)
        elif bounds["month_start"] <= record_date <= today_local:
            raw["this_month"] = max(raw["this_month"], value)
        elif bounds["last_month_start"] <= record_date <= bounds["last_month_end"]:
            raw["last_month"] = max(raw["last_month"], value)
        elif bounds["prev_prev_month_start"] <= record_date <= bounds["prev_prev_month_end"]:
            raw["month_before_last"] = max(raw["month_before_last"], value)
    
    return raw


def _compute_delta_stats(raw_stats: Dict[str, int]) -> Dict[str, int]:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –¥–µ–ª—å—Ç—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    
    Args:
        raw_stats: –°—ã—Ä—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–µ–ª—å—Ç–∞–º–∏
    """
    return {
        "delta_ok_day": raw_stats["today"] - raw_stats["yesterday"],
        "delta_ok_prev_day": raw_stats["yesterday"] - raw_stats["day_before_yesterday"],
        "delta_ok_week": raw_stats["this_week"] - raw_stats["last_week"],
        "delta_ok_prev_week": raw_stats["last_week"] - raw_stats["week_before_last"],
        "delta_ok_month": raw_stats["this_month"] - raw_stats["last_month"],
        "delta_ok_prev_month": raw_stats["last_month"] - raw_stats["month_before_last"],
    }


def get_maintenance_statistics() -> Dict[str, int]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∑–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã.
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
    """
    config = load_config()
    
    if not config['maintenance_history']:
        return {
            "today": 0,
            "yesterday": 0,
            "this_week": 0,
            "last_week": 0,
            "this_month": 0,
            "last_month": 0
        }
    
    today = datetime.now().date()
    bounds = _compute_period_boundaries(today)
    
    # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Å–ª—É–∂–µ–Ω–Ω—ã—Ö –∏ —Å—Ä–æ—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    ok_raw_stats = _aggregate_raw_field(
        config['maintenance_history'], today, bounds,
        lambda rec: rec.get('ok', rec.get('serviced', 0))
    )
    
    urgent_raw_stats = _aggregate_raw_field(
        config['maintenance_history'], today, bounds,
        lambda rec: rec.get('urgent', 0)
    )
    
    # –í—ã—á–∏—Å–ª—è–µ–º –¥–µ–ª—å—Ç—ã
    ok_delta_stats = _compute_delta_stats(ok_raw_stats)
    urgent_delta_stats = _compute_delta_stats(urgent_raw_stats)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    merged = {
        **ok_raw_stats, 
        **ok_delta_stats, 
        **{f"urgent_{k}": v for k, v in urgent_raw_stats.items()}, 
        **urgent_delta_stats
    }
    merged["today"] = merged["delta_ok_day"]
    
    return merged


def recalculate_excel_formulas(file_path: Path) -> bool:
    """
    –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É–ª—ã –≤ Excel —Ñ–∞–π–ª–µ –ø–µ—Ä–µ–¥ —á—Ç–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç xlwings –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Excel –≤ —Ñ–æ–Ω–µ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞.
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
    
    Returns:
        True –µ—Å–ª–∏ –ø–µ—Ä–µ—Å—á–µ—Ç —É—Å–ø–µ—à–µ–Ω, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    if not XLWINGS_AVAILABLE:
        print("‚ö†Ô∏è xlwings –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –§–æ—Ä–º—É–ª—ã Excel –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏.")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install xlwings")
        return False
        
    if not file_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return False
    
    try:
        print(f"üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã —Å xlwings: {file_path.name}")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º Excel –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (—Å–∫—Ä—ã—Ç–æ–µ)
        with xw.App(visible=False, add_book=False) as app:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–Ω–∏–≥—É
            wb = app.books.open(file_path)
            
            try:
                # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç
                app.calculation = 'automatic'
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º—É–ª—ã
                wb.app.calculate()
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç
                for sheet in wb.sheets:
                    if sheet.name in SHEETS_CONFIG:
                        try:
                            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –ª–∏—Å—Ç
                            sheet.api.Calculate()
                        except AttributeError:
                            # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                            pass
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏
                wb.save()
                print("‚úÖ –§–æ—Ä–º—É–ª—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (xlwings)")
                
                return True
                
            finally:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–Ω–∏–≥—É
                wb.close()
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ —Å xlwings: {e}")
        print("üí° –°–æ–≤–µ—Ç: —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª Excel –Ω–µ –æ—Ç–∫—Ä—ã—Ç –≤ –¥—Ä—É–≥–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
        return False


def read_excel_data() -> Tuple[List[pd.DataFrame], List[pd.DataFrame], int, Dict[str, int]]:
    """
    –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤.
    –ü–µ—Ä–µ–¥ —á—Ç–µ–Ω–∏–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É–ª—ã Excel.
    
    Returns:
        –ö–æ—Ä—Ç–µ–∂: (alarm_items, warning_items, total_records, status_counts)
    """
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã –ø–µ—Ä–µ–¥ —á—Ç–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
    recalculate_excel_formulas(EXCEL_FILE)
    
    """
    –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤.
    
    Returns:
        –ö–æ—Ä—Ç–µ–∂: (alarm_items, warning_items, total_records, status_counts)
    """
    alarm_items = []
    warning_items = []
    total_records = 0
    status_counts = {status: 0 for status in MAINTENANCE_STATUSES}
    
    for sheet_name, config in SHEETS_CONFIG.items():
        try:
            print(f"–ß–∏—Ç–∞–µ–º –ª–∏—Å—Ç: {sheet_name}")
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            df = pd.read_excel(
                EXCEL_FILE, 
                sheet_name=sheet_name,
                header=3,  # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ 4 (–∏–Ω–¥–µ–∫—Å 3)
                nrows=500  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
            )
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
            if len(df.columns) > len(COLUMN_NAMES):
                df = df.iloc[:, :len(COLUMN_NAMES)]
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
            df.columns = COLUMN_NAMES
            
            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            df = df.dropna(how='all')
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            total_records += len(df)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
            for status in status_counts.keys():
                status_counts[status] += len(df[df['–°—Ç–∞—Ç—É—Å'] == status])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
            alarm = df[df['–°—Ç–∞—Ç—É—Å'] == '–û–ë–°–õ–£–ñ–ò–¢–¨']
            warning = df[df['–°—Ç–∞—Ç—É—Å'] == '–í–Ω–∏–º–∞–Ω–∏–µ']
            
            print(f"  –ù–∞–π–¥–µ–Ω–æ –°–†–û–ß–ù–û: {len(alarm)}, –í–Ω–∏–º–∞–Ω–∏–µ: {len(warning)}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
            if not alarm.empty:
                alarm = alarm.copy()
                alarm['–¢–∏–ø'] = sheet_name
                alarm_items.append(alarm)
            
            if not warning.empty:
                warning = warning.copy()
                warning['–¢–∏–ø'] = sheet_name
                warning_items.append(warning)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–∏—Å—Ç–∞ {sheet_name}: {e}")
    
    return alarm_items, warning_items, total_records, status_counts


def format_date(date_value) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç dd.mm.yyyy.
    
    Args:
        date_value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã
    """
    if pd.notna(date_value) and hasattr(date_value, 'strftime'):
        return date_value.strftime('%d.%m.%Y')
    elif pd.notna(date_value):
        return str(date_value)
    else:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"


def format_field_value(value) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è NaN –∑–Ω–∞—á–µ–Ω–∏—è."""
    if pd.isna(value):
        return ""
    return str(value)


def format_item_info(item: pd.Series, item_type: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ.
    
    Args:
        item: –°–µ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ
        item_type: –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if "–ü–ö" in item_type:
        emoji = "üíª"
    elif "–®–∫–∞—Ñ" in item_type:
        emoji = "üì¶"
    else:
        emoji = "‚öôÔ∏è"  # —ç–º–æ–¥–∑–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∞—Ç—å –ø–æ–ª–µ "–í—ã–ø–æ–ª–Ω–∏—Ç—å"
    raboty_row = ""
    if not pd.isna(item['–†–∞–±–æ—Ç—ã']):
        raobty_value = format_field_value(item['–†–∞–±–æ—Ç—ã'])
        raboty_row = f"<tr><td style='padding: 1px 10px 1px 0; width: 200px; color:#2c3e50; vertical-align: top;'>–†–∞–±–æ—Ç—ã:</td><td style='padding: 1px 0; color:#2c3e50; font-weight: bold;'>{raobty_value}</td></tr>"

    info = f"""
<div style='margin-bottom: 10px;'>
    <table style='width: 100%; border-collapse: collapse; font-size: 14px;'>
        <tr><td style='padding: 1px 10px 1px 0; width: 200px; color:#2c3e50; vertical-align: top;'>–¢–∏–ø:</td><td style='padding: 1px 0; color:#2c3e50; font-weight: bold;'>{emoji}  {item_type}</td></tr>
        <tr><td style='padding: 1px 10px 1px 0; width: 200px; color:#2c3e50; vertical-align: top;'>–û–±—ä–µ–∫—Ç:</td><td style='padding: 1px 0; color:#2c3e50; font-weight: bold;'>{item['–û–±—ä–µ–∫—Ç']}</td></tr>
        <tr><td style='padding: 1px 10px 1px 0; width: 200px; color:#2c3e50; vertical-align: top;'>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</td><td style='padding: 1px 0; color:#2c3e50; font-weight: bold;'>{item['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}</td></tr>
        <tr><td style='padding: 1px 10px 1px 0; width: 200px; color:#2c3e50; vertical-align: top;'>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ:</td><td style='padding: 1px 0; color:#2c3e50; font-weight: bold;'>{item['–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ']}</td></tr>
        <tr><td style='padding: 1px 10px 1px 0; width: 200px; color:#2c3e50; vertical-align: top;'>–ú–µ—Å—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è:</td><td style='padding: 1px 0; color:#2c3e50; font-weight: bold;'>{item['–ú–µ—Å—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è']}</td></tr>
        {raboty_row}
        <tr><td style='padding: 1px 10px 1px 0; width: 200px; color:#2c3e50; vertical-align: top;'>–ò–Ω—Ç–µ—Ä–≤–∞–ª –¢–û (–¥–Ω–µ–π):</td><td style='padding: 1px 0; color:#2c3e50; font-weight: bold;'>{item['–ò–Ω—Ç–µ—Ä–≤–∞–ª –¢–û (–¥–Ω–µ–π)']}</td></tr>
        <tr><td style='padding: 1px 10px 1px 0; width: 200px; color:#2c3e50; vertical-align: top;'>–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¢–û:</td><td style='padding: 1px 0; color:#2c3e50; font-weight: bold;'>{format_date(item['–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¢–û'])}</td></tr>
        <tr><td style='padding: 1px 10px 1px 0; width: 200px; color:#2c3e50; vertical-align: top;'>–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¢–û:</td><td style='padding: 1px 0; color:#2c3e50; font-weight: bold;'>{format_date(item['–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¢–û'])}</td></tr>
        <tr><td style='padding: 1px 10px 1px 0; width: 200px; color:#2c3e50; vertical-align: top;'>–°—Ç–∞—Ç—É—Å:</td><td style='padding: 1px 0; color:#2c3e50; font-weight: bold;'>{item['–°—Ç–∞—Ç—É—Å']}</td></tr>
    </table>
</div>
"""
    return info


def create_maintenance_chart() -> Optional[Path]:
    """
    –°–æ–∑–¥–∞–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É —Å—Ç–∞—Ç—É—Å–æ–≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 62 –¥–Ω—è.
    
    Returns:
        –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∏–∞–≥—Ä–∞–º–º—ã –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        config = load_config()
        if not config['maintenance_history']:
            return None
            
        today = datetime.now().date()
        start_date = today - timedelta(days=61)
        
        # –°–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        date_to_vals = {}
        for rec in config['maintenance_history']:
            rec_date = datetime.fromisoformat(rec['date']).date()
            if start_date <= rec_date <= today:
                date_to_vals[rec_date] = (
                    rec.get('ok', rec.get('serviced', 0)),
                    rec.get('urgent', 0),
                    rec.get('warning', 0),
                )
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        days_sorted = [start_date + timedelta(days=i) for i in range(62)]
        ok_vals = [date_to_vals.get(d, (0, 0, 0))[0] for d in days_sorted]
        urgent_vals = [date_to_vals.get(d, (0, 0, 0))[1] for d in days_sorted]
        warning_vals = [date_to_vals.get(d, (0, 0, 0))[2] for d in days_sorted]

        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        x = list(range(len(days_sorted)))
        plt.figure(figsize=(9, 3))
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–º–∫–∏
        ax = plt.gca()
        for spine in ax.spines.values():
            spine.set_color('#2c3e50')
            spine.set_linewidth(0.8)

        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–µ–≤: —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
        # 1. "–û–ë–°–õ–£–ñ–ò–¢–¨" (—Å–≤–µ—Ä—Ö—É) - –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö
        bottom_stack = [ok_vals[i] + warning_vals[i] for i in range(len(x))]
        urgent_bars = plt.bar(x, urgent_vals, bottom=bottom_stack, width=0.9, color='#e74c3c', label='–û–ë–°–õ–£–ñ–ò–¢–¨')
        # 2. "–í–Ω–∏–º–∞–Ω–∏–µ" (–ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ) - –ø–æ–≤–µ—Ä—Ö "–í –Ω–æ—Ä–º–µ"
        warning_bars = plt.bar(x, warning_vals, bottom=ok_vals, width=0.9, color='#f39c12', label='–í–Ω–∏–º–∞–Ω–∏–µ')
        # 3. "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è" (—Å–∞–º—ã–π –Ω–∏–∂–Ω–∏–π —Å–ª–æ–π)
        ok_bars = plt.bar(x, ok_vals, width=0.9, color='#18bc9c', label='–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è')

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π
        _add_chart_labels(x, ok_vals, urgent_vals, warning_vals)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–∏ –∏ –ª–µ–≥–µ–Ω–¥—É
        labels = [d.strftime('%d.%m') for d in days_sorted]
        tick_step = max(1, len(x) // 31)
        tick_positions = list(range(0, len(x), tick_step))
        tick_labels = [labels[i] for i in tick_positions]
        plt.xticks(tick_positions, tick_labels, rotation=45, ha='right', fontsize=6, color="#2c3e50")
        plt.yticks(fontsize=6, color="#2c3e50")
        plt.title('–°—Ç–∞—Ç—É—Å—ã –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 62 –¥–Ω—è)', fontsize=7, color="#2c3e50")
        plt.legend(loc='upper left', fontsize=7)
        plt.tight_layout()
        plt.grid(axis='y', linestyle='--', linewidth=0.5, alpha=0.7)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
        DATA_DIR.mkdir(parents=True, exist_ok=True)
        chart_path = DATA_DIR / 'maintenance_status_62days.png'
        plt.savefig(chart_path, dpi=150)
        plt.close()
        
        return chart_path
        
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É: {e}")
        return None


def _add_chart_labels(x: List[int], 
                     ok_vals: List[int], 
                     urgent_vals: List[int], 
                     warning_vals: List[int]) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –¥–∏–∞–≥—Ä–∞–º–º—É.
    
    Args:
        x: –ü–æ–∑–∏—Ü–∏–∏ –ø–æ –æ—Å–∏ X
        ok_vals: –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è "–í –Ω–æ—Ä–º–µ"
        urgent_vals: –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è "–°–†–û–ß–ù–û"
        warning_vals: –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è "–í–Ω–∏–º–∞–Ω–∏–µ"
    """
    for i, xpos in enumerate(x):
        total_val = ok_vals[i] + urgent_vals[i] + warning_vals[i]
        if total_val <= 0:
            continue
            
        # –ü–æ–¥–ø–∏—Å–∏ –¥–ª—è "–í –Ω–æ—Ä–º–µ" (—Å–∞–º—ã–π –Ω–∏–∂–Ω–∏–π —Å–ª–æ–π)
        if ok_vals[i] > 0:
            pct = ok_vals[i] / total_val * 100
            if pct >= 5:
                y_pos = ok_vals[i] / 2
                plt.text(
                    xpos, y_pos,
                    f"{ok_vals[i]}",
                    ha='center', va='center', rotation=90, fontsize=6, color='white'
                )
        
        # –ü–æ–¥–ø–∏—Å–∏ –¥–ª—è "–í–Ω–∏–º–∞–Ω–∏–µ" (–ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ)
        if warning_vals[i] > 0:
            pct = warning_vals[i] / total_val * 100
            if pct >= 5:
                y_pos = ok_vals[i] + warning_vals[i] / 2
                plt.text(
                    xpos, y_pos,
                    f"{warning_vals[i]}",
                    ha='center', va='center', rotation=90, fontsize=6, color='black'
                )
        
        # –ü–æ–¥–ø–∏—Å–∏ –¥–ª—è "–°–†–û–ß–ù–û" (—Å–≤–µ—Ä—Ö—É)
        if urgent_vals[i] > 0:
            pct = urgent_vals[i] / total_val * 100
            if pct >= 5:
                y_pos = ok_vals[i] + warning_vals[i] + urgent_vals[i] / 2
                plt.text(
                    xpos, y_pos,
                    f"{urgent_vals[i]}",
                    ha='center', va='center', rotation=90, fontsize=6, color='white'
                )

def create_email_body(urgent_items: List[pd.DataFrame], 
                     warning_items: List[pd.DataFrame], 
                     total_records: int, 
                     status_counts: Dict[str, int]) -> Tuple[str, Optional[Path]]:
    """
    –°–æ–∑–¥–∞–µ—Ç HTML-—Ç–µ–ª–æ –ø–∏—Å—å–º–∞ –∏ –ø—É—Ç—å –∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–∏–∞–≥—Ä–∞–º–º—ã.
    
    Args:
        urgent_items: –°–ø–∏—Å–æ–∫ DataFrame —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –°–†–û–ß–ù–û
        warning_items: –°–ø–∏—Å–æ–∫ DataFrame —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –í–Ω–∏–º–∞–Ω–∏–µ
        total_records: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        status_counts: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    
    Returns:
        –ö–æ—Ä—Ç–µ–∂: (HTML-—Ç–µ–ª–æ –ø–∏—Å—å–º–∞, –ø—É—Ç—å –∫ –¥–∏–∞–≥—Ä–∞–º–º–µ)
    """
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–µ–æ–±—Å–ª—É–∂–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    unserviced_count = status_counts['–û–ë–°–õ–£–ñ–ò–¢–¨'] #+ status_counts['–í–Ω–∏–º–∞–Ω–∏–µ']
    unserviced_percentage = (unserviced_count / total_records * 100) if total_records > 0 else 0
    
    html_parts: List[str] = []
    
    # –í–µ—Ä—Ö–Ω—è—è —Å–≤–æ–¥–∫–∞ - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –Ω–∞–¥ —Ü–∏—Ñ—Ä–∞–º–∏ #2c3e50 #2c3e50
    html_parts.append(
        f"""
        <div style="background-color: #2c3e50; border-radius: 8px; padding: 15px; border-left: 4px solid #18bc9c;
                    color: white;">
            <div style="display: flex; justify-content: space-around; text-align: center; flex-wrap: wrap;">
                <div style="margin: 5px; ">
                    <div style="font-size: 12px; color: #ffd6d6; margin-bottom: 3px;">üö® –û–ë–°–õ–£–ñ–ò–¢–¨</div>
                    <div style="font-size: 20px; font-weight: bold; color: #ff6b6b;">{status_counts['–û–ë–°–õ–£–ñ–ò–¢–¨']} ({unserviced_percentage:.1f}%) </div>
                </div>
                
                <div style="margin: 5px; margin-left: 20px;">
                    <div style="font-size: 12px; color: #ffe082; margin-bottom: 3px;">‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ</div>
                    <div style="font-size: 20px; font-weight: bold; color: #ffd54f;">{status_counts['–í–Ω–∏–º–∞–Ω–∏–µ']}</div>
                </div>
                
                <div style="margin: 5px; margin-left: 20px;">
                    <div style="font-size: 12px; color: #18bc9c; margin-bottom: 3px;">‚úÖ –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è</div>
                    <div style="font-size: 20px; font-weight: bold; color: #18bc9c;">{status_counts['–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è']}</div>
                </div>
                
                <div style="margin: 5px; margin-left: 20px;">
                    <div style="font-size: 12px; color: #bbdefb; margin-bottom: 3px;">üìä –í—Å–µ–≥–æ</div>
                    <div style="font-size: 20px; font-weight: bold; color: #4fc3f7;">{total_records}</div>
                </div>

                <div style="margin-left: 25px;">
                    <img src="cid:app_icon" alt="–ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" style="width: 52px; height: 52px; border-radius: 8px;">
                </div>

            </div>
            

        </div>
        <br/>
        """
    )

    # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
    chart_path = create_maintenance_chart()

    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –ü–ï–†–ï–î —Å–µ–∫—Ü–∏–µ–π —Å—Ä–æ—á–Ω—ã—Ö —Ä–∞–±–æ—Ç
    if chart_path and Path(chart_path).exists():
        html_parts.append(
            (
                "<div>"
                "<img src=\"cid:status_chart\" alt=\"–î–∏–∞–≥—Ä–∞–º–º–∞\"/>"
                "</div><br/>"
            )
        )
    bg_colors = [ "#F9FCFF", "#ffffff"]
    # –°—Ä–æ—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —á–µ—Ä–µ–¥—É—é—â–∏–º—Å—è —Ñ–æ–Ω–æ–º
    if urgent_items:
        total_urgent = sum(len(df) for df in urgent_items)
        html_parts.append(f"<div><strong style='color:#e74c3c;'>üö® –û–ë–°–õ–£–ñ–ò–¢–¨ (–∑–∞–ø–∏—Å–µ–π: {total_urgent}):</strong></div>")
        html_parts.append("<hr style='background-color: #e74c3c; height: 1px; border: none;' />")
        color_index = 0
        for urgent_df in urgent_items:
            for _, item in urgent_df.iterrows():
                bg_color = bg_colors[color_index % len(bg_colors)]
                html_parts.append(f"<div style='background-color: {bg_color}; margin-left: 0px; padding: 10px; padding-left: 25px;'>" + format_item_info(item, item['–¢–∏–ø']) + "</div>")
                color_index += 1
    
    # –≠–ª–µ–º–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è —Å —á–µ—Ä–µ–¥—É—é—â–∏–º—Å—è —Ñ–æ–Ω–æ–º
    if warning_items:
        total_warning = sum(len(df) for df in warning_items)
        html_parts.append(f"<div><br/><strong style='color:#f39c12;'>‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è —Å—Ä–æ–∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. (–∑–∞–ø–∏—Å–µ–π: {total_warning}):</strong></div>")
        html_parts.append("<hr style='background-color: #f39c12; height: 1px; border: none;' />")
        color_index = 0
        for warning_df in warning_items:
            for _, item in warning_df.iterrows():
                bg_color = bg_colors[color_index % len(bg_colors)]
                html_parts.append(f"<div style='background-color: {bg_color}; margin-left: 0px; padding: 10px; padding-left: 25px;'>" + format_item_info(item, item['–¢–∏–ø']) + "</div>")
                color_index += 1
                # –î–æ–±–∞–≤–∏–ª –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏
                html_parts.append("<br/>")

    # –Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å –ø–∏—Å—å–º–∞
    html_parts.append(
        f"""
        <br/>
        <div style="background-color: #EFF2F6; border-left: 4px solid #18bc9c; 
                    padding: 12px; margin-top: 20px; font-size: 11px; color: #333;">
            <div style="margin-bottom: 8px;">

                <span style="font-weight: bold;color:#2c3e50;">üîß –°–∫—Ä–∏–ø—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ê–°–£–¢–ü</span> 
                <span style="float: right; background-color: #18bc9c; color: white; 
                            padding: 2px 8px; border-radius: 10px; font-size: 10px;">
                    v{VERSION} –æ—Ç {RELEASE_DATE}<br/> semonoff@gmail.com
                </span>
                <span style="float: right; margin-right: 8px "> 
                    <img src="cid:app_icon" alt="–ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" style="width: 32px; height: 32px; border-radius: 8px;">
                </span>
            </div>
            
            <div style="line-height: 1.4;">
                <span style="color: #2c3e50;">üìÇ –§–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ASUTP-FILES-SRV01:</span><br/>
                <span style="margin-left: 15px;">üìä –¢–∞–±–ª–∏—Ü–∞:</span> <code>{EXCEL_FILE}</code><br/>
                <span style="margin-left: 15px;">üêç –°–∫—Ä–∏–ø—Ç:</span> <code>{Path(__file__).resolve()}</code> <br/>
                <span style="">‚è∞ –ó–∞–ø—É—Å–∫:</span> –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –∏–∑ Task Scheduler, –ø—Ä–∞–≤–∏–ª–æ: <code>maintenance_alert.py</code><br/>
                <span style="">üåê –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥:</span> <a href="https://github.com/SemonoffArt/maintenance_alert" style="color: #18bc9c; text-decoration: none;">GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π</a><br/>
                <span style="">üìß –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ ({len(RECIPIENTS)}):</span> {', '.join(RECIPIENTS)}<br/>
                <div style="text-align: right; margin-top: 5px; color: #2c3e50; font-size: 10px;">
                    –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
                </div>
            </div>
        </div>
        """
    )



    html_body = "".join(html_parts)
    return html_body, chart_path


def send_email(html_body: str, recipients: List[str], chart_path: Optional[Path] = None) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —á–µ—Ä–µ–∑ SMTP –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º.
    
    Args:
        html_body: HTML-—Ç–µ–ª–æ –ø–∏—Å—å–º–∞
        recipients: –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        chart_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∏–∞–≥—Ä–∞–º–º—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        True –µ—Å–ª–∏ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = MIMEMultipart('related')
        msg['From'] = SENDER_EMAIL
        msg['To'] = ", ".join(recipients)
        msg['Subject'] = "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"
        
        alternative = MIMEMultipart('alternative')
        msg.attach(alternative)

        # –î–æ–±–∞–≤–ª—è–µ–º HTML-–∫–æ–Ω—Ç–µ–Ω—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏
        if chart_path and Path(chart_path).exists():
            alternative.attach(MIMEText(html_body, 'html', 'utf-8'))

            with open(chart_path, 'rb') as img_file:
                img = MIMEImage(img_file.read())
                img.add_header('Content-ID', '<status_chart>')
                img.add_header('Content-Disposition', 'inline', filename=Path(chart_path).name)
                msg.attach(img)
        else:
            alternative.attach(MIMEText(html_body, 'html', 'utf-8'))

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        icon_path = DATA_DIR / "manky.png"
        if icon_path.exists():
            with open(icon_path, 'rb') as icon_file:
                icon = MIMEImage(icon_file.read())
                icon.add_header('Content-ID', '<app_icon>')
                icon.add_header('Content-Disposition', 'inline', filename='manky.png')
                msg.attach(icon)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º starttls() –¥–ª—è –ø–æ—Ä—Ç–∞ 25 –±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        server.sendmail(SENDER_EMAIL, recipients, msg.as_string())
        server.quit()
        
        print(f"‚úÖ –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(recipients)} –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("üöÄ –ü–†–û–ì–†–ê–ú–ú–ê –ó–ê–ü–£–©–ï–ù–ê")
    print("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è...")
    print(f"–ü–æ–ª—É—á–∞—Ç–µ–ª–∏: {', '.join(RECIPIENTS)}")
    
    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel
    alarm_items, warning_items, total_records, status_counts = read_excel_data()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    print("\n" + "="*60)
    print("üìä –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø")
    print("="*60)
    update_maintenance_statistics(alarm_items, warning_items, total_records, status_counts)
    print("="*60 + "\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è
    total_alarm = sum(len(df) for df in alarm_items) if alarm_items else 0
    total_warning = sum(len(df) for df in warning_items) if warning_items else 0
    
    print(f"\n–ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ:")
    print(f"  –°–†–û–ß–ù–û: {total_alarm}")
    print(f"  –í–Ω–∏–º–∞–Ω–∏–µ: {total_warning}")
    
    if total_alarm == 0 and total_warning == 0:
        print("–ù–µ—Ç —Å—Ä–æ—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –í—Å–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ –ø–æ—Ä—è–¥–∫–µ.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞ –∏ —Å—Ç—Ä–æ–∏–º –¥–∏–∞–≥—Ä–∞–º–º—É
    email_body, chart_path = create_email_body(alarm_items, warning_items, total_records, status_counts)
    print("\n–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –ø–∏—Å—å–º–æ:")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
    print(f"\n–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ {len(RECIPIENTS)} –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º...")
    if send_email(email_body, RECIPIENTS, chart_path):
        print("–ü–∏—Å—å–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–∞")


if __name__ == "__main__":
    main()
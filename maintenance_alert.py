import pandas as pd
from datetime import datetime, timedelta
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.image import MIMEImage
from pathlib import Path
import sys
import json
import matplotlib.pyplot as plt

# –í–µ—Ä—Å–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
VERSION = "0.9.10"
RELEASE_DATE = "14.08.2025"
PROGRAM_DIR = Path(__file__).parent.absolute()
RESOURCES_DIR = PROGRAM_DIR / "resources"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
EXCEL_FILENAME = "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –ü–ö –∏ —à–∫–∞—Ñ–æ–≤ –ê–°–£–¢–ü.xlsx"
CONFIG_FILE = RESOURCES_DIR / "maintenance_alert_history.json"

def get_excel_file_path() -> Path:
    """–ò—â–µ—Ç Excel-—Ñ–∞–π–ª —Å–Ω–∞—á–∞–ª–∞ –≤ –ø–∞–ø–∫–µ —Å–∫—Ä–∏–ø—Ç–∞, –∑–∞—Ç–µ–º —É—Ä–æ–≤–Ω–µ–º –≤—ã—à–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å (–¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω)."""
    primary = PROGRAM_DIR / EXCEL_FILENAME
    if primary.exists():
        return primary
    fallback = PROGRAM_DIR.parent / EXCEL_FILENAME
    if fallback.exists():
        return fallback
    # –ï—Å–ª–∏ –Ω–∏–≥–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –≤ –ø–∞–ø–∫–µ —Å–∫—Ä–∏–ø—Ç–∞ (–¥–ª—è –ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏)
    return primary

EXCEL_FILE = get_excel_file_path()
SHEETS_CONFIG = {
    "–ü–ö –ê–°–£ –¢–ü": {"range": "A4:J300"},
    "–®–∫–∞—Ñ—ã –ê–°–£ –¢–ü": {"range": "A4:J300"}
}
SMTP_SERVER = "mgd-ex1.pavlik-gold.ru"
SMTP_PORT = 25
SENDER_EMAIL = "maintenance.asutp@pavlik-gold.ru"  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
RECIPIENTS = [
    "asutp@pavlik-gold.ru",
    #  "ochkur.evgeniy@pavlik-gold.ru",
    #  "dorovik.roman@pavlik-gold.ru",
    # –î–æ–±–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–µ email –∞–¥—Ä–µ—Å–∞
]


def show_version():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print(f"üîß –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ v{VERSION}")
    print(f"üìÖ –î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞: {RELEASE_DATE}")
    print(f"üêç Python: {sys.version.split()[0]}")
    print("=" * 60)


def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        if CONFIG_FILE.exists():
            with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                config = json.load(f)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
                if 'maintenance_history' not in config:
                    config['maintenance_history'] = []
                if 'last_update' not in config:
                    config['last_update'] = None
                if 'version' not in config:
                    config['version'] = VERSION
                return config
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config = {
                "maintenance_history": [],
                "last_update": None,
                "version": VERSION
            }
            save_config(config)
            return config
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            "maintenance_history": [],
            "last_update": None,
            "version": VERSION
        }


def save_config(config):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ JSON —Ñ–∞–π–ª"""
    try:
        config['last_update'] = datetime.now().isoformat()
        config['version'] = VERSION
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(config, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {CONFIG_FILE}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")


def update_maintenance_statistics(alarm_items, warning_items, total_records, status_counts):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    config = load_config()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    now = datetime.now()
    today = now.date()
    today_str = today.isoformat()
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–∞ {today.strftime('%d.%m.%Y')}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today_record_exists = False
    for record in config['maintenance_history']:
        if record['date'] == today_str:
            today_record_exists = True
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–ø–∏—Å—å –∑–∞ {today.strftime('%d.%m.%Y')}: {record.get('ok', record.get('serviced', 0))} –æ–±—Å–ª—É–∂–µ–Ω–æ")
            break
    
    # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
    if today_record_exists:
        print(f"‚úÖ –ó–∞–ø–∏—Å—å –∑–∞ {today.strftime('%d.%m.%Y')} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")
        return config
    
    print(f"üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∑–∞ {today.strftime('%d.%m.%Y')}...")
    
    try:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—Å–ª—É–∂–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (—Å—Ç–∞—Ç—É—Å "–í –Ω–æ—Ä–º–µ")
        ok_count = status_counts.get('–í –Ω–æ—Ä–º–µ', 0)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        maintenance_record = {
            "date": today_str,
            "total_equipment": total_records,
            "ok": ok_count,
            "urgent": status_counts.get('–°–†–û–ß–ù–û', 0),
            "warning": status_counts.get('–í–Ω–∏–º–∞–Ω–∏–µ', 0),
            "timestamp": now.isoformat()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        config['maintenance_history'].append(maintenance_record)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 100 –∑–∞–ø–∏—Å—è–º–∏
        if len(config['maintenance_history']) > 100:
            config['maintenance_history'] = config['maintenance_history'][-100:]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        save_config(config)
        
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –∑–∞ {today.strftime('%d.%m.%Y')}: {ok_count} –æ–±—Å–ª—É–∂–µ–Ω–æ")
        return config
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return config


def get_maintenance_statistics():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∑–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã"""
    config = load_config()
    
    if not config['maintenance_history']:
        return {
            "today": 0,
            "yesterday": 0,
            "this_week": 0,
            "last_week": 0,
            "this_month": 0,
            "last_month": 0
        }
    
    def _compute_period_boundaries(base_date):
        yesterday_local = base_date - timedelta(days=1)
        day_before_yesterday_local = yesterday_local - timedelta(days=1)
        week_start_local = base_date - timedelta(days=base_date.weekday())
        last_week_start_local = week_start_local - timedelta(days=7)
        last_week_end_local = week_start_local - timedelta(days=1)
        prev_prev_week_start_local = last_week_start_local - timedelta(days=7)
        prev_prev_week_end_local = last_week_start_local - timedelta(days=1)
        month_start_local = base_date.replace(day=1)
        last_month_end_local = month_start_local - timedelta(days=1)
        last_month_start_local = last_month_end_local.replace(day=1)
        prev_prev_month_end_local = last_month_start_local - timedelta(days=1)
        prev_prev_month_start_local = prev_prev_month_end_local.replace(day=1)
        return {
            "yesterday": yesterday_local,
            "day_before_yesterday": day_before_yesterday_local,
            "week_start": week_start_local,
            "last_week_start": last_week_start_local,
            "last_week_end": last_week_end_local,
            "prev_prev_week_start": prev_prev_week_start_local,
            "prev_prev_week_end": prev_prev_week_end_local,
            "month_start": month_start_local,
            "last_month_start": last_month_start_local,
            "last_month_end": last_month_end_local,
            "prev_prev_month_start": prev_prev_month_start_local,
            "prev_prev_month_end": prev_prev_month_end_local,
        }

    def _aggregate_raw_field(history_records, today_local, bounds, extract_value):
        raw = {
            "today": 0,
            "yesterday": 0,
            "day_before_yesterday": 0,
            "this_week": 0,
            "last_week": 0,
            "week_before_last": 0,
            "this_month": 0,
            "last_month": 0,
            "month_before_last": 0,
        }
        for record in history_records:
            record_date = datetime.fromisoformat(record['date']).date()
            value = extract_value(record)
            if record_date == today_local:
                raw["today"] = value
            elif record_date == bounds["yesterday"]:
                raw["yesterday"] = value
            elif record_date == bounds["day_before_yesterday"]:
                raw["day_before_yesterday"] = value
            elif bounds["week_start"] <= record_date <= today_local:
                raw["this_week"] = max(raw["this_week"], value)
            elif bounds["last_week_start"] <= record_date <= bounds["last_week_end"]:
                raw["last_week"] = max(raw["last_week"], value)
            elif bounds["prev_prev_week_start"] <= record_date <= bounds["prev_prev_week_end"]:
                raw["week_before_last"] = max(raw["week_before_last"], value)
            elif bounds["month_start"] <= record_date <= today_local:
                raw["this_month"] = max(raw["this_month"], value)
            elif bounds["last_month_start"] <= record_date <= bounds["last_month_end"]:
                raw["last_month"] = max(raw["last_month"], value)
            elif bounds["prev_prev_month_start"] <= record_date <= bounds["prev_prev_month_end"]:
                raw["month_before_last"] = max(raw["month_before_last"], value)
        return raw

    def _compute_ok_deltas(raw_stats):
        return {
            "delta_ok_day": raw_stats["today"] - raw_stats["yesterday"],
            "delta_ok_week": raw_stats["this_week"] - raw_stats["last_week"],
            "delta_ok_month": raw_stats["this_month"] - raw_stats["last_month"],
        }

    today = datetime.now().date()
    bounds = _compute_period_boundaries(today)
    ok_raw_stats = _aggregate_raw_field(
        config['maintenance_history'], today, bounds,
        lambda rec: rec.get('ok', rec.get('serviced', 0))
    )
    urgent_raw_stats = _aggregate_raw_field(
        config['maintenance_history'], today, bounds,
        lambda rec: rec.get('urgent', 0)
    )
    ok_delta_stats = {
        "delta_ok_day": ok_raw_stats["today"] - ok_raw_stats["yesterday"],
        "delta_ok_prev_day": ok_raw_stats["yesterday"] - ok_raw_stats["day_before_yesterday"],
        "delta_ok_week": ok_raw_stats["this_week"] - ok_raw_stats["last_week"],
        "delta_ok_prev_week": ok_raw_stats["last_week"] - ok_raw_stats["week_before_last"],
        "delta_ok_month": ok_raw_stats["this_month"] - ok_raw_stats["last_month"],
        "delta_ok_prev_month": ok_raw_stats["last_month"] - ok_raw_stats["month_before_last"],
    }
    urgent_delta_stats = {
        "delta_urgent_day": urgent_raw_stats["today"] - urgent_raw_stats["yesterday"],
        "delta_urgent_prev_day": urgent_raw_stats["yesterday"] - urgent_raw_stats["day_before_yesterday"],
        "delta_urgent_week": urgent_raw_stats["this_week"] - urgent_raw_stats["last_week"],
        "delta_urgent_prev_week": urgent_raw_stats["last_week"] - urgent_raw_stats["week_before_last"],
        "delta_urgent_month": urgent_raw_stats["this_month"] - urgent_raw_stats["last_month"],
        "delta_urgent_prev_month": urgent_raw_stats["last_month"] - urgent_raw_stats["month_before_last"],
    }

    merged = {**ok_raw_stats, **ok_delta_stats, **{f"urgent_{k}": v for k, v in urgent_raw_stats.items()}, **urgent_delta_stats}
    merged["today"] = merged["delta_ok_day"]
    return merged


def read_excel_data():
    """–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤"""
    alarm_items = []
    warning_items = []
    total_records = 0
    status_counts = {"–°–†–û–ß–ù–û": 0, "–í–Ω–∏–º–∞–Ω–∏–µ": 0, "–í –Ω–æ—Ä–º–µ": 0}
    
    # –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ (–¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –≤ —Å—Ç—Ä–æ–∫–µ 4)
    column_names = [
        "‚Ññ", "–û–±—ä–µ–∫—Ç", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ", "–ú–µ—Å—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è",
        "–ò–Ω—Ç–µ—Ä–≤–∞–ª –¢–û (–¥–Ω–µ–π)", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–∑–∞ –¥–Ω–µ–π)", "–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¢–û",
        "–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¢–û", "–°—Ç–∞—Ç—É—Å"
    ]
    
    for sheet_name, config in SHEETS_CONFIG.items():
        try:
            print(f"–ß–∏—Ç–∞–µ–º –ª–∏—Å—Ç: {sheet_name}")
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            df = pd.read_excel(
                EXCEL_FILE, 
                sheet_name=sheet_name,
                header=3,  # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ 4 (–∏–Ω–¥–µ–∫—Å 3)
                nrows=500  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
            )
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
            if len(df.columns) > len(column_names):
                df = df.iloc[:, :len(column_names)]
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
            df.columns = column_names
            
            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            df = df.dropna(how='all')
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            total_records += len(df)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
            for status in status_counts.keys():
                status_counts[status] += len(df[df['–°—Ç–∞—Ç—É—Å'] == status])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
            alarm = df[df['–°—Ç–∞—Ç—É—Å'] == '–°–†–û–ß–ù–û']
            warning = df[df['–°—Ç–∞—Ç—É—Å'] == '–í–Ω–∏–º–∞–Ω–∏–µ']
            
            print(f"  –ù–∞–π–¥–µ–Ω–æ –°–†–û–ß–ù–û: {len(alarm)}, –í–Ω–∏–º–∞–Ω–∏–µ: {len(warning)}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
            if not alarm.empty:
                alarm = alarm.copy()
                alarm['–¢–∏–ø'] = sheet_name
                alarm_items.append(alarm)
            
            if not warning.empty:
                warning = warning.copy()
                warning['–¢–∏–ø'] = sheet_name
                warning_items.append(warning)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–∏—Å—Ç–∞ {sheet_name}: {e}")
    
    return alarm_items, warning_items, total_records, status_counts


def format_date(date_value):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç dd.mm.yyyy"""
    if pd.notna(date_value) and hasattr(date_value, 'strftime'):
        return date_value.strftime('%d.%m.%Y')
    elif pd.notna(date_value):
        return str(date_value)
    else:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"


def format_item_info(item, item_type):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ"""
    info = f"""
–¢–∏–ø: {item_type}
–û–±—ä–µ–∫—Ç: {item['–û–±—ä–µ–∫—Ç']}
–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {item['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}
–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ: {item['–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ']}
–ú–µ—Å—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è: {item['–ú–µ—Å—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è']}
–ò–Ω—Ç–µ—Ä–≤–∞–ª –¢–û (–¥–Ω–µ–π): {item['–ò–Ω—Ç–µ—Ä–≤–∞–ª –¢–û (–¥–Ω–µ–π)']}
–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¢–û: {format_date(item['–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¢–û'])}
–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¢–û: {format_date(item['–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¢–û'])}
–°—Ç–∞—Ç—É—Å: {item['–°—Ç–∞—Ç—É—Å']}
"""
    return info


def create_email_body(urgent_items, warning_items, total_records, status_counts):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–ª–æ –ø–∏—Å—å–º–∞ –∏ –ø—É—Ç—å –∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–∏–∞–≥—Ä–∞–º–º—ã (–µ—Å–ª–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞)."""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    maintenance_stats = get_maintenance_statistics()

    def _format_signed(number):
        return f"+{number}" if number > 0 else str(number)

    def _build_delta_block(title, day, prev_day, week, prev_week, month, prev_month):
        lines = [
            title,
            f"  –∑–∞ —Å—É—Ç–∫–∏: {_format_signed(day)}",
            f"  –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—É—Ç–∫–∏: {_format_signed(prev_day)}",
            f"  –∑–∞ –Ω–µ–¥–µ–ª—é: {_format_signed(week)}",
            f"  –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–¥–µ–ª—é: {_format_signed(prev_week)}",
            f"  –∑–∞ –º–µ—Å—è—Ü: {_format_signed(month)}",
            f"  –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü: {_format_signed(prev_month)}",
            "",
        ]
        return "\n".join(lines) + "\n"
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–µ–æ–±—Å–ª—É–∂–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    unserviced_count = status_counts['–°–†–û–ß–ù–û'] + status_counts['–í–Ω–∏–º–∞–Ω–∏–µ']
    unserviced_percentage = (unserviced_count / total_records * 100) if total_records > 0 else 0
    
    body = f"  –°–†–û–ß–ù–û: {status_counts['–°–†–û–ß–ù–û']}\n"
    body += f"  –í–Ω–∏–º–∞–Ω–∏–µ: {status_counts['–í–Ω–∏–º–∞–Ω–∏–µ']}\n"
    body += f"  –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è: {status_counts['–í –Ω–æ—Ä–º–µ']}\n"
    body += f"  –í—Å–µ–≥–æ: {total_records}\n"
    body += f"  –ù–µ–æ–±—Å–ª—É–∂–µ–Ω–æ: {unserviced_count} ({unserviced_percentage:.1f}%)\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: –∏–∑–º–µ–Ω–µ–Ω–∏—è 'ok' –∏ 'urgent'
    body += _build_delta_block(
        "üîß –û–ë–°–õ–£–ñ–ï–ù–û (–∏–∑–º–µ–Ω–µ–Ω–∏–µ 'ok'):",
        maintenance_stats.get('delta_ok_day', 0),
        maintenance_stats.get('delta_ok_prev_day', 0),
        maintenance_stats.get('delta_ok_week', 0),
        maintenance_stats.get('delta_ok_prev_week', 0),
        maintenance_stats.get('delta_ok_month', 0),
        maintenance_stats.get('delta_ok_prev_month', 0),
    )
    body += _build_delta_block(
        "üö® –°–†–û–ß–ù–û (–∏–∑–º–µ–Ω–µ–Ω–∏–µ 'urgent'):",
        maintenance_stats.get('delta_urgent_day', 0),
        maintenance_stats.get('delta_urgent_prev_day', 0),
        maintenance_stats.get('delta_urgent_week', 0),
        maintenance_stats.get('delta_urgent_prev_week', 0),
        maintenance_stats.get('delta_urgent_month', 0),
        maintenance_stats.get('delta_urgent_prev_month', 0),
    )
    body += "\n"

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 62 –¥–Ω—è –ø–æ –¥–∞–Ω–Ω—ã–º –∏—Å—Ç–æ—Ä–∏–∏
    chart_path = None
    try:
        config = load_config()
        if config['maintenance_history']:
            today = datetime.now().date()
            start_date = today - timedelta(days=61)
            # –°–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–≤–∫–ª—é—á–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–Ω–∏)
            date_to_vals = {}
            for rec in config['maintenance_history']:
                rec_date = datetime.fromisoformat(rec['date']).date()
                if start_date <= rec_date <= today:
                    date_to_vals[rec_date] = (
                        rec.get('ok', rec.get('serviced', 0)),
                        rec.get('urgent', 0),
                        rec.get('warning', 0),
                    )
            days_sorted = [start_date + timedelta(days=i) for i in range(62)]
            ok_vals = [date_to_vals.get(d, (0, 0, 0))[0] for d in days_sorted]
            urgent_vals = [date_to_vals.get(d, (0, 0, 0))[1] for d in days_sorted]
            warning_vals = [date_to_vals.get(d, (0, 0, 0))[2] for d in days_sorted]

            x = list(range(len(days_sorted)))
            plt.figure(figsize=(10, 3))
            ok_bars = plt.bar(x, ok_vals, width=0.9, color='#2E7D32', label='–í –Ω–æ—Ä–º–µ')
            urgent_bars = plt.bar(x, urgent_vals, bottom=ok_vals, width=0.9, color='#C62828', label='–°–†–û–ß–ù–û')
            bottom_stack = [ok_vals[i] + urgent_vals[i] for i in range(len(x))]
            warning_bars = plt.bar(x, warning_vals, bottom=bottom_stack, width=0.9, color='#F9A825', label='–í–Ω–∏–º–∞–Ω–∏–µ')

            # –ü–æ–¥–ø–∏—Å–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∏ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –∫–∞–∂–¥–æ–º—É —Å–µ–≥–º–µ–Ω—Ç—É —Å—Ç–æ–ª–±—Ü–∞
            for i, xpos in enumerate(x):
                total_val = ok_vals[i] + urgent_vals[i] + warning_vals[i]
                if total_val <= 0:
                    continue
                # ok
                if ok_vals[i] > 0:
                    pct = ok_vals[i] / total_val * 100
                    if pct >= 5:
                        y_pos = ok_vals[i] / 2
                        plt.text(
                            xpos, y_pos,
                            f"{ok_vals[i]}", # ({pct:.0f}%)
                            ha='center', va='center', rotation=90, fontsize=6, color='white'
                        )
                # urgent
                if urgent_vals[i] > 0:
                    pct = urgent_vals[i] / total_val * 100
                    if pct >= 5:
                        y_pos = ok_vals[i] + urgent_vals[i] / 2
                        plt.text(
                            xpos, y_pos,
                            f"{urgent_vals[i]}", # ({pct:.0f}%)
                            ha='center', va='center', rotation=90, fontsize=6, color='white'
                        )
                # warning
                if warning_vals[i] > 0:
                    pct = warning_vals[i] / total_val * 100
                    if pct >= 5:
                        y_pos = ok_vals[i] + urgent_vals[i] + warning_vals[i] / 2
                        plt.text(
                            xpos, y_pos,
                            f"{warning_vals[i]}", # ({pct:.0f}%)
                            ha='center', va='center', rotation=90, fontsize=6, color='black'
                        )
            labels = [d.strftime('%d.%m') for d in days_sorted]
            tick_step = max(1, len(x) // 15)
            tick_positions = list(range(0, len(x), tick_step))
            tick_labels = [labels[i] for i in tick_positions]
            plt.xticks(tick_positions, tick_labels, rotation=45, ha='right')
            plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
            plt.title('–°—Ç–∞—Ç—É—Å—ã –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 62 –¥–Ω—è)')
            plt.legend(loc='upper left')
            plt.tight_layout()
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –≤ –ø–∞–ø–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤
            RESOURCES_DIR.mkdir(parents=True, exist_ok=True)
            chart_path = RESOURCES_DIR / 'maintenance_status_62days.png'
            plt.savefig(chart_path, dpi=150)
            plt.close()
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É: {e}")


    if urgent_items:
        total_urgent = sum(len(df) for df in urgent_items)
        body += f"üö® –°–†–û–ß–ù–û–ï –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï (–∑–∞–ø–∏—Å–µ–π: {total_urgent}):\n"
        body += "=" * 50 + "\n"
        for urgent_df in urgent_items:
            for _, item in urgent_df.iterrows():
                body += format_item_info(item, item['–¢–∏–ø'])
                body += "-" * 30 + "\n"
    
    if warning_items:
        total_warning = sum(len(df) for df in warning_items)
        body += f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è —Å—Ä–æ–∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. (–∑–∞–ø–∏—Å–µ–π: {total_warning}):\n"
        body += "=" * 50 + "\n"
        for warning_df in warning_items:
            for _, item in warning_df.iterrows():
                body += format_item_info(item, item['–¢–∏–ø'])
                body += "-" * 30 + "\n"

    body += f"\n\n–°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}."
    body += f"\n\n–¢–∞–±–ª–∏—Ü–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ —Å–∫—Ä–∏–ø—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –Ω–∞ —Ñ–∞–π–ª–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ –≤: '{PROGRAM_DIR}'."
    body += f"\n–°–∫—Ä–∏–ø—Ç –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, –Ω–∞ —Ñ–∞–π–ª–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ, –≤ Windows Task Scheduler (–ø—Ä–∞–≤–∏–ª–æ 'maintenance_alert.py')"
    body += f"\n\n–°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {', '.join(RECIPIENTS)}"
    body += f"\n\nüîß v{VERSION} –æ—Ç {RELEASE_DATE}"
    
    return body, chart_path


def send_email(body, recipients, chart_path=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —á–µ—Ä–µ–∑ SMTP –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º. –ï—Å–ª–∏ chart_path –∑–∞–¥–∞–Ω, –≤—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –≤ –ø–∏—Å—å–º–æ."""
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = MIMEMultipart('related')
        msg['From'] = SENDER_EMAIL
        msg['To'] = ", ".join(recipients)  # –í—Å–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        msg['Subject'] = "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"

        alternative = MIMEMultipart('alternative')
        msg.attach(alternative)

        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
        alternative.attach(MIMEText(body, 'plain', 'utf-8'))

        # HTML –≤–µ—Ä—Å–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏
        if chart_path and Path(chart_path).exists():
            html_body = body.replace('\n', '<br/>')
            html_body += f"<br/><br/><b>–î–∏–∞–≥—Ä–∞–º–º–∞ –∑–∞ 62 –¥–Ω—è:</b><br/><img src=\"cid:status_chart\" alt=\"–î–∏–∞–≥—Ä–∞–º–º–∞\"/>"
            alternative.attach(MIMEText(html_body, 'html', 'utf-8'))

            with open(chart_path, 'rb') as img_file:
                img = MIMEImage(img_file.read())
                img.add_header('Content-ID', '<status_chart>')
                img.add_header('Content-Disposition', 'inline', filename=Path(chart_path).name)
                msg.attach(img)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º starttls() –¥–ª—è –ø–æ—Ä—Ç–∞ 25 –±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
        server.sendmail(SENDER_EMAIL, recipients, msg.as_string())
        server.quit()
        
        print(f"‚úÖ –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(recipients)} –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: {e}")
        return False


def main():
    """–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–≤–æ–π –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
    print("üöÄ –ü–†–û–ì–†–ê–ú–ú–ê –ó–ê–ü–£–©–ï–ù–ê")
    print("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è...")
    print(f"–ü–æ–ª—É—á–∞—Ç–µ–ª–∏: {', '.join(RECIPIENTS)}")
    
    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel
    alarm_items, warning_items, total_records, status_counts = read_excel_data()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    print("\n" + "="*60)
    print("üìä –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø")
    print("="*60)
    update_maintenance_statistics(alarm_items, warning_items, total_records, status_counts)
    print("="*60 + "\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è
    total_alarm = sum(len(df) for df in alarm_items) if alarm_items else 0
    total_warning = sum(len(df) for df in warning_items) if warning_items else 0
    
    print(f"\n–ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ:")
    print(f"  –°–†–û–ß–ù–û: {total_alarm}")
    print(f"  –í–Ω–∏–º–∞–Ω–∏–µ: {total_warning}")
    
    if total_alarm == 0 and total_warning == 0:
        print("–ù–µ—Ç —Å—Ä–æ—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –í—Å–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ –ø–æ—Ä—è–¥–∫–µ.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞ –∏ —Å—Ç—Ä–æ–∏–º –¥–∏–∞–≥—Ä–∞–º–º—É
    email_body, chart_path = create_email_body(alarm_items, warning_items, total_records, status_counts)
    print("\n–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –ø–∏—Å—å–º–æ:")
    print("-" * 50)
    print(email_body)
    print("-" * 50)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
    print(f"\n–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ {len(RECIPIENTS)} –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º...")
    if send_email(email_body, RECIPIENTS, chart_path):
        print("–ü–∏—Å—å–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–∞")


if __name__ == "__main__":
    main()
# maintenance_alert_refactored.py
import pandas as pd
from datetime import datetime, timedelta, date
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.image import MIMEImage
from email.mime.base import MIMEBase
from email import encoders
from pathlib import Path
import sys
import json
import matplotlib.pyplot as plt
import logging
from openpyxl import load_workbook
from typing import Dict, List, Tuple, Optional, Any, NamedTuple

# --- 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
class Config:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    VERSION = "1.4.0"
    RELEASE_DATE = "10.09.2025"

    PROGRAM_DIR = Path(__file__).parent.absolute()
    DATA_DIR = PROGRAM_DIR / "data"
    TMP_DIR = PROGRAM_DIR / "tmp"
    LOG_FILE = DATA_DIR / "maintenance_alert.log"

    EXCEL_FILENAME = "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –ü–ö –∏ —à–∫–∞—Ñ–æ–≤ –ê–°–£–¢–ü.xlsx"
    HISTORY_FILE = DATA_DIR / "maintenance_alert_history.json"

    SMTP_SERVER = "mgd-ex1.pavlik-gold.ru"
    SMTP_PORT = 25
    SENDER_EMAIL = "maintenance.asutp@pavlik-gold.ru"
    RECIPIENTS = [
        "asutp@pavlik-gold.ru",
        # "ochkur.evgeniy@pavlik-gold.ru",
        # "dorovik.roman@pavlik-gold.ru",
    ]

    COLUMN_NAMES = [
        "‚Ññ", "–û–±—ä–µ–∫—Ç", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ", "–ú–µ—Å—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è",
        "–†–∞–±–æ—Ç—ã", "–ò–Ω—Ç–µ—Ä–≤–∞–ª –¢–û (–¥–Ω–µ–π)", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–∑–∞ –¥–Ω–µ–π)", "–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¢–û",
        "–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¢–û", "–°—Ç–∞—Ç—É—Å"
    ]
    SHEETS_CONFIG = {
        "–ü–ö –ê–°–£ –¢–ü": {"range": "A4:K300"},
        "–®–∫–∞—Ñ—ã –ê–°–£ –¢–ü": {"range": "A4:K300"}
    }
    MAINTENANCE_STATUSES = ["–û–ë–°–õ–£–ñ–ò–¢–¨", "–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"]
    STATUS_URGENT = "–û–ë–°–õ–£–ñ–ò–¢–¨"
    STATUS_WARNING = "–í–Ω–∏–º–∞–Ω–∏–µ"
    STATUS_OK = "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"

    @classmethod
    def get_excel_file_path(cls) -> Path:
        """–ò—â–µ—Ç Excel-—Ñ–∞–π–ª —Å–Ω–∞—á–∞–ª–∞ –≤ –ø–∞–ø–∫–µ —Å–∫—Ä–∏–ø—Ç–∞, –∑–∞—Ç–µ–º —É—Ä–æ–≤–Ω–µ–º –≤—ã—à–µ."""
        primary = cls.PROGRAM_DIR / cls.EXCEL_FILENAME
        if primary.exists():
            return primary
        fallback = cls.PROGRAM_DIR.parent / cls.EXCEL_FILENAME
        if fallback.exists():
            return fallback
        return primary # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –≤ –ø–∞–ø–∫–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –æ—à–∏–±–∫–∏

# --- 2. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
class DualLogger:
    """–ö–ª–∞—Å—Å –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª."""
    def __init__(self, log_file_path: Path):
        self.log_file_path = log_file_path
        self._setup_logging()

    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        self.log_file_path.parent.mkdir(parents=True, exist_ok=True)
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S',
            handlers=[
                logging.FileHandler(self.log_file_path, encoding='utf-8'),
                logging.StreamHandler(sys.stdout)
            ]
        )
        self.logger = logging.getLogger('maintenance_alert')

    def log(self, message: str):
        """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ —Ñ–∞–π–ª."""
        self.logger.info(message)

    def log_separator(self, char='=', length=60):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ –ª–æ–≥."""
        self.log(char * length)

    def log_section(self, title: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ –≤ –ª–æ–≥."""
        self.log_separator()
        self.log(title)
        self.log_separator()

# --- 3. –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –∏ Excel ---
class ExcelHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel —Ñ–∞–π–ª–∞–º–∏."""
    def __init__(self, config: Config, logger: DualLogger):
        self.config = config
        self.logger = logger
        self.xlwings_available = self._check_xlwings()

    def _check_xlwings(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å xlwings."""
        try:
            import xlwings as xw
            self.xw = xw
            return True
        except ImportError:
            self.logger.log("‚ö†Ô∏è xlwings –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –§–æ—Ä–º—É–ª—ã Excel –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏.")
            self.logger.log("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install xlwings")
            return False

    def _verify_file_write(self, file_path: Path, original_mtime: float = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –æ–±–Ω–æ–≤–ª–µ–Ω."""
        try:
            if not file_path.exists() or file_path.stat().st_size == 0:
                return False
            with open(file_path, 'rb') as f:
                if len(f.read(8)) < 8: return False
            if original_mtime is not None:
                current_mtime = file_path.stat().st_mtime
                if current_mtime <= original_mtime:
                    self.logger.log(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω: –æ—Ä–∏–≥. {original_mtime:.1f}, —Ç–µ–∫. {current_mtime:.1f}")
                    return False
                else:
                    self.logger.log(f"‚úÖ –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: —Ä–∞–∑–Ω–∏—Ü–∞ {current_mtime - original_mtime:.1f} —Å–µ–∫")
            return True
        except Exception as e:
            self.logger.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return False

    def recalculate_formulas(self, file_path: Path) -> Tuple[bool, Optional[Path]]:
        """–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É–ª—ã –≤ Excel —Ñ–∞–π–ª–µ."""
        if not self.xlwings_available:
            return False, None
        if not file_path.exists():
            self.logger.log(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return False, None

        self.config.TMP_DIR.mkdir(parents=True, exist_ok=True)
        tmp_file_path = self.config.TMP_DIR / file_path.name

        try:
            self.logger.log(f"üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã —Å xlwings: {file_path}")
            original_mtime = file_path.stat().st_mtime

            with self.xw.App(visible=False, add_book=False) as app:
                wb = app.books.open(str(file_path))
                try:
                    app.calculation = 'automatic'
                    wb.app.calculate()
                    for sheet in wb.sheets:
                        if sheet.name in self.config.SHEETS_CONFIG:
                            try:
                                sheet.api.Calculate()
                            except AttributeError:
                                pass
                    wb.save(tmp_file_path)

                    if not self._verify_file_write(tmp_file_path):
                        self.logger.log("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –±—ã–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ tmp –ø–∞–ø–∫—É!")
                        return False, None

                    self.logger.log(f"‚úÖ –§–æ—Ä–º—É–ª—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {tmp_file_path}")
                    return True, tmp_file_path
                finally:
                    wb.close()
        except Exception as e:
            self.logger.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ —Å xlwings: {e}")
            self.logger.log("üí° –°–æ–≤–µ—Ç: —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª Excel –Ω–µ –æ—Ç–∫—Ä—ã—Ç –≤ –¥—Ä—É–≥–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
            return False, None

    def generate_maintenance_data_file(self, urgent_items: List[pd.DataFrame]) -> Optional[Path]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª maintenance_data.xlsx –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.
        
        Args:
            urgent_items: –°–ø–∏—Å–æ–∫ DataFrame —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ç—Ä–µ–±—É—é—â–∏–º–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
        current_date = datetime.now().strftime("%d.%m.%Y")
        # current_date2 = datetime.now().strftime("%d_%m_%Y")
        template_path = self.config.DATA_DIR / "template.xlsx"
        output_path = self.config.TMP_DIR / f"maintenance_data_{current_date}.xlsx"
        
        if not template_path.exists():
            self.logger.log(f"‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {template_path}")
            return None
            
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É tmp –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.config.TMP_DIR.mkdir(parents=True, exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω
            wb = load_workbook(template_path)
            
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_columns = ["‚Ññ", "–û–±—ä–µ–∫—Ç", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ", "–ú–µ—Å—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è", "–†–∞–±–æ—Ç—ã", "–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¢–û"]
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç
            for sheet_name in self.config.SHEETS_CONFIG.keys():
                if sheet_name in wb.sheetnames:
                    ws = wb[sheet_name]
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞—Ç—É –≤ —è—á–µ–π–∫—É D1
                    ws['D1'] = current_date
                    self.logger.log(f"üìÖ –ó–∞–ø–∏—Å–∞–Ω–∞ –¥–∞—Ç–∞ {current_date} –≤ —è—á–µ–π–∫—É D1 –ª–∏—Å—Ç–∞ '{sheet_name}'")
                    
                    # –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –ª–∏—Å—Ç–∞
                    sheet_data = None
                    for df in urgent_items:
                        if '–¢–∏–ø' in df.columns and df['–¢–∏–ø'].iloc[0] == sheet_name:
                            sheet_data = df
                            break
                    
                    if sheet_data is not None and not sheet_data.empty:
                        self.logger.log(f"üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º {len(sheet_data)} –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ª–∏—Å—Ç '{sheet_name}'")
                        
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—è —Å 5–π —Å—Ç—Ä–æ–∫–∏
                        start_row = 5
                        record_number = 1  # –ù—É–º–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1
                        for idx, (_, row) in enumerate(sheet_data.iterrows()):
                            current_row = start_row + idx
                            
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
                            for col_idx, col_name in enumerate(export_columns, start=1):
                                if col_name == "‚Ññ":
                                    # –î–ª—è –∫–æ–ª–æ–Ω–∫–∏ "‚Ññ" –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é
                                    value = str(record_number)
                                elif col_name in row:
                                    value = row[col_name]
                                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–∫–∞–ª—è—Ä
                                    if hasattr(value, 'item'):
                                        value = value.item()
                                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ —Å –¥–∞—Ç–æ–π
                                    if '–î–∞—Ç–∞' in col_name and pd.notna(value):
                                        if hasattr(value, 'strftime'):
                                            value = value.strftime('%d.%m.%Y')
                                        else:
                                            value = str(value)
                                    elif pd.isna(value):
                                        value = ""
                                    else:
                                        value = str(value) if value is not None else ""
                                else:
                                    value = ""
                                
                                ws.cell(row=current_row, column=col_idx, value=value)
                            
                            record_number += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏
                    else:
                        self.logger.log(f"‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ª–∏—Å—Ç '{sheet_name}'")

                    #–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å  –≤ –ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
                    # wb.views.sheetView[0].topLeftCell = 'A1'
                    # ws['A1'].select()


            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            wb.save(output_path)
            wb.close()
            
            self.logger.log(f"‚úÖ –§–∞–π–ª maintenance_data.xlsx —Å–æ–∑–¥–∞–Ω: {output_path}")
            return output_path
            
        except Exception as e:
            self.logger.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ maintenance_data.xlsx: {e}")
            return None

    def read_data(self) -> Tuple[List[pd.DataFrame], List[pd.DataFrame], int, Dict[str, int], bool]:
        """–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞."""
        recalc_success, excel_file_to_use = self.recalculate_formulas(self.config.get_excel_file_path())

        if excel_file_to_use is None:
            excel_file_to_use = self.config.get_excel_file_path()
            self.logger.log(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {excel_file_to_use}")
        else:
            self.logger.log(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª —Å –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏: {excel_file_to_use}")

        urgent_items = []
        warning_items = []
        total_records = 0
        status_counts = {status: 0 for status in self.config.MAINTENANCE_STATUSES}

        for sheet_name, config in self.config.SHEETS_CONFIG.items():
            try:
                self.logger.log(f"–ß–∏—Ç–∞–µ–º –ª–∏—Å—Ç: {sheet_name}")
                df = pd.read_excel(excel_file_to_use, sheet_name=sheet_name, header=3, nrows=500)

                if len(df.columns) > len(self.config.COLUMN_NAMES):
                    df = df.iloc[:, :len(self.config.COLUMN_NAMES)]
                df.columns = self.config.COLUMN_NAMES
                df = df.dropna(how='all')

                total_records += len(df)
                for status in status_counts.keys():
                    status_counts[status] += len(df[df['–°—Ç–∞—Ç—É—Å'] == status])

                urgent_df = df[df['–°—Ç–∞—Ç—É—Å'] == self.config.STATUS_URGENT]
                warning_df = df[df['–°—Ç–∞—Ç—É—Å'] == self.config.STATUS_WARNING]

                self.logger.log(f"  –ù–∞–π–¥–µ–Ω–æ {self.config.STATUS_URGENT}: {len(urgent_df)}, {self.config.STATUS_WARNING}: {len(warning_df)}")

                if not urgent_df.empty:
                    urgent_df = urgent_df.copy()
                    urgent_df['–¢–∏–ø'] = sheet_name
                    urgent_items.append(urgent_df)
                if not warning_df.empty:
                    warning_df = warning_df.copy()
                    warning_df['–¢–∏–ø'] = sheet_name
                    warning_items.append(warning_df)
            except Exception as e:
                self.logger.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–∏—Å—Ç–∞ {sheet_name}: {e}")

        return urgent_items, warning_items, total_records, status_counts, recalc_success

# --- 4. –õ–æ–≥–∏–∫–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è ---
class MaintenanceChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è."""
    def __init__(self, config: Config, logger: DualLogger):
        self.config = config
        self.logger = logger

    def format_date(self, date_value) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç dd.mm.yyyy."""
        if pd.notna(date_value):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–∏–ø datetime –∏–ª–∏ date
            if hasattr(date_value, 'strftime'):
                try:
                    return date_value.strftime('%d.%m.%Y')
                except (ValueError, AttributeError):
                    pass # –ï—Å–ª–∏ strftime –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á–∏—Å–ª–æ, –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å
            return str(date_value)
        return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

    def format_field_value(self, value) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è NaN –∑–Ω–∞—á–µ–Ω–∏—è."""
        if pd.isna(value):
            return ""
        return str(value)

    def format_item_info(self, item: pd.Series, item_type: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ."""
        emoji = "üíª" if "–ü–ö" in item_type else ("üì¶" if "–®–∫–∞—Ñ" in item_type else "‚öôÔ∏è")

        raboty_row = ""
        if not pd.isna(item['–†–∞–±–æ—Ç—ã']):
            raboty_value = self.format_field_value(item['–†–∞–±–æ—Ç—ã'])
            raboty_row = f"<tr><td style='padding: 1px 10px 1px 0; width: 200px; color:#2c3e50; vertical-align: top;'>–†–∞–±–æ—Ç—ã:</td><td style='padding: 1px 0; color:#2c3e50; font-weight: bold;'>{raboty_value}</td></tr>"

        return f"""
<div style='margin-bottom: 10px;'>
    <table style='width: 100%; border-collapse: collapse; font-size: 14px;'>
        <tr><td style='padding: 1px 10px 1px 0; width: 200px; color:#2c3e50; vertical-align: top;'>–¢–∏–ø:</td><td style='padding: 1px 0; color:#2c3e50; font-weight: bold;'>{emoji}  {item_type}</td></tr>
        <tr><td style='padding: 1px 10px 1px 0; width: 200px; color:#2c3e50; vertical-align: top;'>–û–±—ä–µ–∫—Ç:</td><td style='padding: 1px 0; color:#2c3e50; font-weight: bold;'>{item['–û–±—ä–µ–∫—Ç']}</td></tr>
        <tr><td style='padding: 1px 10px 1px 0; width: 200px; color:#2c3e50; vertical-align: top;'>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</td><td style='padding: 1px 0; color:#2c3e50; font-weight: bold;'>{item['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}</td></tr>
        <tr><td style='padding: 1px 10px 1px 0; width: 200px; color:#2c3e50; vertical-align: top;'>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ:</td><td style='padding: 1px 0; color:#2c3e50; font-weight: bold;'>{item['–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ']}</td></tr>
        <tr><td style='padding: 1px 10px 1px 0; width: 200px; color:#2c3e50; vertical-align: top;'>–ú–µ—Å—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è:</td><td style='padding: 1px 0; color:#2c3e50; font-weight: bold;'>{item['–ú–µ—Å—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è']}</td></tr>
        {raboty_row}
        <tr><td style='padding: 1px 10px 1px 0; width: 200px; color:#2c3e50; vertical-align: top;'>–ò–Ω—Ç–µ—Ä–≤–∞–ª –¢–û (–¥–Ω–µ–π):</td><td style='padding: 1px 0; color:#2c3e50; font-weight: bold;'>{item['–ò–Ω—Ç–µ—Ä–≤–∞–ª –¢–û (–¥–Ω–µ–π)']}</td></tr>
        <tr><td style='padding: 1px 10px 1px 0; width: 200px; color:#2c3e50; vertical-align: top;'>–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¢–û:</td><td style='padding: 1px 0; color:#2c3e50; font-weight: bold;'>{self.format_date(item['–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¢–û'])}</td></tr>
        <tr><td style='padding: 1px 10px 1px 0; width: 200px; color:#2c3e50; vertical-align: top;'>–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¢–û:</td><td style='padding: 1px 0; color:#2c3e50; font-weight: bold;'>{self.format_date(item['–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¢–û'])}</td></tr>
        <tr><td style='padding: 1px 10px 1px 0; width: 200px; color:#2c3e50; vertical-align: top;'>–°—Ç–∞—Ç—É—Å:</td><td style='padding: 1px 0; color:#2c3e50; font-weight: bold;'>{item['–°—Ç–∞—Ç—É—Å']}</td></tr>
    </table>
</div>
"""

# --- 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
class StatisticsManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è."""
    def __init__(self, config: Config, logger: DualLogger):
        self.config = config
        self.logger = logger
        self.history_file = self.config.HISTORY_FILE

    def load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞."""
        try:
            if self.history_file.exists():
                with open(self.history_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    return self._validate_config_structure(config)
            else:
                return self._create_default_config()
        except Exception as e:
            self.logger.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return self._create_default_config()

    def _validate_config_structure(self, config: Dict[str, Any]) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        if 'maintenance_history' not in config:
            config['maintenance_history'] = []
        if 'last_update' not in config:
            config['last_update'] = None
        if 'version' not in config:
            config['version'] = self.config.VERSION
        return config

    def _create_default_config(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        config = {
            "maintenance_history": [],
            "last_update": None,
            "version": self.config.VERSION
        }
        self.save_config(config)
        return config

    def save_config(self, config: Dict[str, Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ JSON —Ñ–∞–π–ª."""
        try:
            config['last_update'] = datetime.now().isoformat()
            config['version'] = self.config.VERSION
            with open(self.history_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, ensure_ascii=False, indent=2)
            self.logger.log(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {self.history_file}")
        except Exception as e:
            self.logger.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    def update_statistics(self, urgent_items: List[pd.DataFrame],
                          warning_items: List[pd.DataFrame],
                          total_records: int,
                          status_counts: Dict[str, int]) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è."""
        config = self.load_config()
        today = datetime.now().date()
        today_str = today.isoformat()
        self.logger.log(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–∞ {today.strftime('%d.%m.%Y')}...")

        ok_count = status_counts.get(self.config.STATUS_OK, 0)
        maintenance_record = {
            "date": today_str,
            "total_equipment": total_records,
            "ok": ok_count,
            "urgent": status_counts.get(self.config.STATUS_URGENT, 0),
            "warning": status_counts.get(self.config.STATUS_WARNING, 0),
            "timestamp": datetime.now().isoformat()
        }

        today_record_index = next((i for i, record in enumerate(config['maintenance_history']) if record['date'] == today_str), None)

        try:
            if today_record_index is not None:
                self.logger.log(f"üìù –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –∑–∞ {today.strftime('%d.%m.%Y')}...")
                config['maintenance_history'][today_record_index] = maintenance_record
                action = "–æ–±–Ω–æ–≤–ª–µ–Ω–∞"
            else:
                self.logger.log(f"üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∑–∞ {today.strftime('%d.%m.%Y')}...")
                config['maintenance_history'].append(maintenance_record)
                action = "–¥–æ–±–∞–≤–ª–µ–Ω–∞"

            if len(config['maintenance_history']) > 120:
                config['maintenance_history'] = config['maintenance_history'][-100:]

            self.save_config(config)
            self.logger.log(f"‚úÖ –ó–∞–ø–∏—Å—å –∑–∞ {today.strftime('%d.%m.%Y')} {action}: {ok_count} –æ–±—Å–ª—É–∂–µ–Ω–æ")
            return config
        except Exception as e:
            self.logger.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return config

    def _compute_period_boundaries(self, base_date: date) -> Dict[str, date]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        yesterday_local = base_date - timedelta(days=1)
        day_before_yesterday_local = yesterday_local - timedelta(days=1)
        week_start_local = base_date - timedelta(days=base_date.weekday())
        last_week_start_local = week_start_local - timedelta(days=7)
        last_week_end_local = week_start_local - timedelta(days=1)
        prev_prev_week_start_local = last_week_start_local - timedelta(days=7)
        prev_prev_week_end_local = last_week_start_local - timedelta(days=1)
        month_start_local = base_date.replace(day=1)
        last_month_end_local = month_start_local - timedelta(days=1)
        last_month_start_local = last_month_end_local.replace(day=1)
        prev_prev_month_end_local = last_month_start_local - timedelta(days=1)
        prev_prev_month_start_local = prev_prev_month_end_local.replace(day=1)
        return {
            "yesterday": yesterday_local,
            "day_before_yesterday": day_before_yesterday_local,
            "week_start": week_start_local,
            "last_week_start": last_week_start_local,
            "last_week_end": last_week_end_local,
            "prev_prev_week_start": prev_prev_week_start_local,
            "prev_prev_week_end": prev_prev_week_end_local,
            "month_start": month_start_local,
            "last_month_start": last_month_start_local,
            "last_month_end": last_month_end_local,
            "prev_prev_month_start": prev_prev_month_start_local,
            "prev_prev_month_end": prev_prev_month_end_local,
        }

    def _aggregate_raw_field(self, history_records: List[Dict],
                            today_local: date,
                            bounds: Dict[str, date],
                            extract_value) -> Dict[str, int]:
        """–ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º."""
        raw = {
            "today": 0,
            "yesterday": 0,
            "day_before_yesterday": 0,
            "this_week": 0,
            "last_week": 0,
            "week_before_last": 0,
            "this_month": 0,
            "last_month": 0,
            "month_before_last": 0,
        }
        for record in history_records:
            record_date = datetime.fromisoformat(record['date']).date()
            value = extract_value(record)
            if record_date == today_local:
                raw["today"] = value
            elif record_date == bounds["yesterday"]:
                raw["yesterday"] = value
            elif record_date == bounds["day_before_yesterday"]:
                raw["day_before_yesterday"] = value
            elif bounds["week_start"] <= record_date <= today_local:
                raw["this_week"] = max(raw["this_week"], value)
            elif bounds["last_week_start"] <= record_date <= bounds["last_week_end"]:
                raw["last_week"] = max(raw["last_week"], value)
            elif bounds["prev_prev_week_start"] <= record_date <= bounds["prev_prev_week_end"]:
                raw["week_before_last"] = max(raw["week_before_last"], value)
            elif bounds["month_start"] <= record_date <= today_local:
                raw["this_month"] = max(raw["this_month"], value)
            elif bounds["last_month_start"] <= record_date <= bounds["last_month_end"]:
                raw["last_month"] = max(raw["last_month"], value)
            elif bounds["prev_prev_month_start"] <= record_date <= bounds["prev_prev_month_end"]:
                raw["month_before_last"] = max(raw["month_before_last"], value)
        return raw

    def _compute_delta_stats(self, raw_stats: Dict[str, int]) -> Dict[str, int]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –¥–µ–ª—å—Ç—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        return {
            "delta_ok_day": raw_stats["today"] - raw_stats["yesterday"],
            "delta_ok_prev_day": raw_stats["yesterday"] - raw_stats["day_before_yesterday"],
            "delta_ok_week": raw_stats["this_week"] - raw_stats["last_week"],
            "delta_ok_prev_week": raw_stats["last_week"] - raw_stats["week_before_last"],
            "delta_ok_month": raw_stats["this_month"] - raw_stats["last_month"],
            "delta_ok_prev_month": raw_stats["last_month"] - raw_stats["month_before_last"],
        }

    def get_statistics(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∑–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã."""
        config = self.load_config()
        if not config['maintenance_history']:
            return {
                "today": 0,
                "yesterday": 0,
                "this_week": 0,
                "last_week": 0,
                "this_month": 0,
                "last_month": 0
            }
        today = datetime.now().date()
        bounds = self._compute_period_boundaries(today)
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Å–ª—É–∂–µ–Ω–Ω—ã—Ö –∏ —Å—Ä–æ—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        ok_raw_stats = self._aggregate_raw_field(
            config['maintenance_history'], today, bounds,
            lambda rec: rec.get('ok', rec.get('serviced', 0))
        )
        urgent_raw_stats = self._aggregate_raw_field(
            config['maintenance_history'], today, bounds,
            lambda rec: rec.get('urgent', 0)
        )
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–µ–ª—å—Ç—ã
        ok_delta_stats = self._compute_delta_stats(ok_raw_stats)
        urgent_delta_stats = self._compute_delta_stats(urgent_raw_stats)
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        merged = {
            **ok_raw_stats,
            **ok_delta_stats,
            **{f"urgent_{k}": v for k, v in urgent_raw_stats.items()},
            **urgent_delta_stats
        }
        merged["today"] = merged["delta_ok_day"]
        return merged

    def _add_chart_labels(self, x: List[int],
                         ok_vals: List[int],
                         urgent_vals: List[int],
                         warning_vals: List[int]) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –¥–∏–∞–≥—Ä–∞–º–º—É."""
        for i, xpos in enumerate(x):
            total_val = ok_vals[i] + urgent_vals[i] + warning_vals[i]
            if total_val <= 0:
                continue
            # –ü–æ–¥–ø–∏—Å–∏ –¥–ª—è "–í –Ω–æ—Ä–º–µ" (—Å–∞–º—ã–π –Ω–∏–∂–Ω–∏–π —Å–ª–æ–π)
            if ok_vals[i] > 0:
                pct = ok_vals[i] / total_val * 100
                if pct >= 5:
                    y_pos = ok_vals[i] / 2
                    plt.text(
                        xpos, y_pos,
                        f"{ok_vals[i]}",
                        ha='center', va='center', rotation=90, fontsize=6, color='white'
                    )
            # –ü–æ–¥–ø–∏—Å–∏ –¥–ª—è "–í–Ω–∏–º–∞–Ω–∏–µ" (–ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ)
            if warning_vals[i] > 0:
                pct = warning_vals[i] / total_val * 100
                if pct >= 5:
                    y_pos = ok_vals[i] + warning_vals[i] / 2
                    plt.text(
                        xpos, y_pos,
                        f"{warning_vals[i]}",
                        ha='center', va='center', rotation=90, fontsize=6, color='black'
                    )
            # –ü–æ–¥–ø–∏—Å–∏ –¥–ª—è "–°–†–û–ß–ù–û" (—Å–≤–µ—Ä—Ö—É)
            if urgent_vals[i] > 0:
                pct = urgent_vals[i] / total_val * 100
                if pct >= 5:
                    y_pos = ok_vals[i] + warning_vals[i] + urgent_vals[i] / 2
                    plt.text(
                        xpos, y_pos,
                        f"{urgent_vals[i]}",
                        ha='center', va='center', rotation=90, fontsize=6, color='white'
                    )

    def create_chart(self) -> Optional[Path]:
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É —Å—Ç–∞—Ç—É—Å–æ–≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è."""
        try:
            config = self.load_config()
            if not config['maintenance_history']:
                return None
            today = datetime.now().date()
            start_date = today - timedelta(days=61)
            # –°–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            date_to_vals = {}
            for rec in config['maintenance_history']:
                rec_date = datetime.fromisoformat(rec['date']).date()
                if start_date <= rec_date <= today:
                    date_to_vals[rec_date] = (
                        rec.get('ok', rec.get('serviced', 0)),
                        rec.get('urgent', 0),
                        rec.get('warning', 0),
                    )
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            days_sorted = [start_date + timedelta(days=i) for i in range(62)]
            ok_vals = [date_to_vals.get(d, (0, 0, 0))[0] for d in days_sorted]
            urgent_vals = [date_to_vals.get(d, (0, 0, 0))[1] for d in days_sorted]
            warning_vals = [date_to_vals.get(d, (0, 0, 0))[2] for d in days_sorted]
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            x = list(range(len(days_sorted)))
            plt.figure(figsize=(9, 3))
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–º–∫–∏
            ax = plt.gca()
            for spine in ax.spines.values():
                spine.set_color('#2c3e50')
                spine.set_linewidth(0.8)
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–µ–≤: —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
            # 1. "–û–ë–°–õ–£–ñ–ò–¢–¨" (—Å–≤–µ—Ä—Ö—É) - –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö
            bottom_stack = [ok_vals[i] + warning_vals[i] for i in range(len(x))]
            urgent_bars = plt.bar(x, urgent_vals, bottom=bottom_stack, width=0.9, color='#e74c3c', label='–û–ë–°–õ–£–ñ–ò–¢–¨')
            # 2. "–í–Ω–∏–º–∞–Ω–∏–µ" (–ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ) - –ø–æ–≤–µ—Ä—Ö "–í –Ω–æ—Ä–º–µ"
            warning_bars = plt.bar(x, warning_vals, bottom=ok_vals, width=0.9, color='#f39c12', label='–í–Ω–∏–º–∞–Ω–∏–µ')
            # 3. "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è" (—Å–∞–º—ã–π –Ω–∏–∂–Ω–∏–π —Å–ª–æ–π)
            ok_bars = plt.bar(x, ok_vals, width=0.9, color='#18bc9c', label='–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è')
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π
            self._add_chart_labels(x, ok_vals, urgent_vals, warning_vals)
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–∏ –∏ –ª–µ–≥–µ–Ω–¥—É
            labels = [d.strftime('%d.%m') for d in days_sorted]
            tick_step = max(1, len(x) // 31)
            tick_positions = list(range(0, len(x), tick_step))
            tick_labels = [labels[i] for i in tick_positions]
            plt.xticks(tick_positions, tick_labels, rotation=45, ha='right', fontsize=6, color="#2c3e50")
            plt.yticks(fontsize=6, color="#2c3e50")
            plt.title('–°—Ç–∞—Ç—É—Å—ã –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 62 –¥–Ω—è)', fontsize=7, color="#2c3e50")
            plt.legend(loc='upper left', fontsize=7)
            plt.tight_layout()
            plt.grid(axis='y', linestyle='--', linewidth=0.5, alpha=0.7)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
            self.config.DATA_DIR.mkdir(parents=True, exist_ok=True)
            chart_path = self.config.DATA_DIR / 'maintenance_status_62days.png'
            plt.savefig(chart_path, dpi=150)
            plt.close()
            return chart_path
        except Exception as e:
            self.logger.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É: {e}")
            return None

# --- 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ ---
class ReportGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML-–æ—Ç—á–µ—Ç–∞."""
    def __init__(self, config: Config, logger: DualLogger, maintenance_checker: MaintenanceChecker, statistics_manager: StatisticsManager):
        self.config = config
        self.logger = logger
        self.maintenance_checker = maintenance_checker
        self.statistics_manager = statistics_manager

    def create_body(self, urgent_items: List[pd.DataFrame],
                    warning_items: List[pd.DataFrame],
                    total_records: int,
                    status_counts: Dict[str, int],
                    recalc_success: bool = True) -> Tuple[str, Optional[Path]]:
        """–°–æ–∑–¥–∞–µ—Ç HTML-—Ç–µ–ª–æ –ø–∏—Å—å–º–∞."""
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–µ–æ–±—Å–ª—É–∂–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        unserviced_count = status_counts[self.config.STATUS_URGENT] #+ status_counts[self.config.STATUS_WARNING]
        unserviced_percentage = (unserviced_count / total_records * 100) if total_records > 0 else 0
        html_parts: List[str] = []
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–µ—Ä–µ—Å—á–µ—Ç–µ —Ñ–æ—Ä–º—É–ª
        if not recalc_success:
            html_parts.append(
                f"""
                <div style="background-color: #ff6b6b; border-radius: 8px; padding: 15px; border-left: 5px solid #e74c3c;
                            color: white; margin-bottom: 20px; display: flex; align-items: center;">
                    <div style="margin-right: 15px;">
                        <img src="cid:app_icon_alert" alt="–ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" style="width: 86px; height: 86px; border-radius: 8px;">
                    </div>
                    <div style="text-align: left;">
                        <div style="font-size: 16px; font-weight: bold; margin-bottom: 10px;">‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –¢–ê–ë–õ–ò–¶–ê –û–¢–ö–†–´–¢–ê! ‚ö†Ô∏è</div>
                        <div style="font-size: 16px; line-height: 1.4;">
                            –ü–µ—Ä–µ—Ä–∞—Å—á—ë—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω!<br/>
                            –ó–∞–∫—Ä–æ–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—á—ë—Ç—ã, –∏–ª–∏ –∂–∏–≤–∏—Ç–µ –¥–∞–ª—å—à–µ –≤ –ø—Ä–æ–∫–ª—è—Ç–æ–º –º–∏—Ä–µ, –∫–æ—Ç–æ—Ä—ã–π —Å–∞–º–∏ –∏ —Å–æ–∑–¥–∞–ª–∏!
                        </div>
                    </div>
                </div>
                """
            )
        # –í–µ—Ä—Ö–Ω—è—è —Å–≤–æ–¥–∫–∞ - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –Ω–∞–¥ —Ü–∏—Ñ—Ä–∞–º–∏ #2c3e50 #2c3e50
        html_parts.append(
            f"""
            <div style="background-color: #2c3e50; border-radius: 8px; padding: 15px; border-left: 4px solid #18bc9c;
                        color: white;">
                <div style="display: flex; justify-content: space-around; text-align: center; flex-wrap: wrap;">
                    <div style="margin: 5px; ">
                        <div style="font-size: 12px; color: #ffd6d6; margin-bottom: 3px;">üö® –û–ë–°–õ–£–ñ–ò–¢–¨</div>
                        <div style="font-size: 20px; font-weight: bold; color: #ff6b6b;">{status_counts[self.config.STATUS_URGENT]} ({unserviced_percentage:.1f}%) </div>
                    </div>
                    <div style="margin: 5px; margin-left: 20px;">
                        <div style="font-size: 12px; color: #ffe082; margin-bottom: 3px;">‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ</div>
                        <div style="font-size: 20px; font-weight: bold; color: #ffd54f;">{status_counts[self.config.STATUS_WARNING]}</div>
                    </div>
                    <div style="margin: 5px; margin-left: 20px;">
                        <div style="font-size: 12px; color: #18bc9c; margin-bottom: 3px;">‚úÖ –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è</div>
                        <div style="font-size: 20px; font-weight: bold; color: #18bc9c;">{status_counts[self.config.STATUS_OK]}</div>
                    </div>
                    <div style="margin: 5px; margin-left: 20px;">
                        <div style="font-size: 12px; color: #bbdefb; margin-bottom: 3px;">üìä –í—Å–µ–≥–æ</div>
                        <div style="font-size: 20px; font-weight: bold; color: #4fc3f7;">{total_records}</div>
                    </div>
                    <div style="margin-left: 25px;">
                        <img src="cid:app_icon" alt="–ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" style="width: 52px; height: 52px; border-radius: 8px;">
                    </div>
                </div>
            </div>
            <br/>
            """
        )
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
        chart_path = self.statistics_manager.create_chart()
        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –ü–ï–†–ï–î —Å–µ–∫—Ü–∏–µ–π —Å—Ä–æ—á–Ω—ã—Ö —Ä–∞–±–æ—Ç
        if chart_path and Path(chart_path).exists():
            html_parts.append(
                (
                    "<div>"
                    "<img src=\"cid:status_chart\" alt=\"–î–∏–∞–≥—Ä–∞–º–º–∞\"/>"
                    "</div><br/>"
                )
            )
        bg_colors = [ "#F9FCFF", "#ffffff"]
        # –°—Ä–æ—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —á–µ—Ä–µ–¥—É—é—â–∏–º—Å—è —Ñ–æ–Ω–æ–º
        if urgent_items:
            total_urgent = sum(len(df) for df in urgent_items)
            html_parts.append(f"<div><strong style='color:#e74c3c;'>üö® –û–ë–°–õ–£–ñ–ò–¢–¨ (–∑–∞–ø–∏—Å–µ–π: {total_urgent}):</strong></div>")
            html_parts.append("<hr style='background-color: #e74c3c; height: 1px; border: none;' />")
            color_index = 0
            for urgent_df in urgent_items:
                for _, item in urgent_df.iterrows():
                    bg_color = bg_colors[color_index % len(bg_colors)]
                    html_parts.append(f"<div style='background-color: {bg_color}; margin-left: 0px; padding: 10px; padding-left: 25px;'>" + self.maintenance_checker.format_item_info(item, item['–¢–∏–ø']) + "</div>")
                    color_index += 1
        # –≠–ª–µ–º–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è —Å —á–µ—Ä–µ–¥—É—é—â–∏–º—Å—è —Ñ–æ–Ω–æ–º
        if warning_items:
            total_warning = sum(len(df) for df in warning_items)
            html_parts.append(f"<div><br/><strong style='color:#f39c12;'>‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è —Å—Ä–æ–∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. (–∑–∞–ø–∏—Å–µ–π: {total_warning}):</strong></div>")
            html_parts.append("<hr style='background-color: #f39c12; height: 1px; border: none;' />")
            color_index = 0
            for warning_df in warning_items:
                for _, item in warning_df.iterrows():
                    bg_color = bg_colors[color_index % len(bg_colors)]
                    html_parts.append(f"<div style='background-color: {bg_color}; margin-left: 0px; padding: 10px; padding-left: 25px;'>" + self.maintenance_checker.format_item_info(item, item['–¢–∏–ø']) + "</div>")
                    color_index += 1
                    # –î–æ–±–∞–≤–∏–ª –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏
                    html_parts.append("<br/>")
        # –Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å –ø–∏—Å—å–º–∞
        html_parts.append(
            f"""
            <br/>
            <div style="background-color: #EFF2F6; border-left: 4px solid #18bc9c; 
                        padding: 12px; margin-top: 20px; font-size: 11px; color: #333;">
                <div style="margin-bottom: 8px;">
                    <span style="font-weight: bold;color:#2c3e50;">üîß –°–∫—Ä–∏–ø—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ê–°–£–¢–ü</span> 
                    <span style="float: right; background-color: #18bc9c; color: white; 
                                padding: 2px 8px; border-radius: 10px; font-size: 10px;">
                        v{self.config.VERSION} –æ—Ç {self.config.RELEASE_DATE}<br/> semonoff@gmail.com
                    </span>
                    <span style="float: right; margin-right: 8px "> 
                        <img src="cid:app_icon" alt="–ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" style="width: 32px; height: 32px; border-radius: 8px;">
                    </span>
                </div>
                <div style="line-height: 1.4;">
                    <span style="color: #2c3e50;">üìÇ –§–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ASUTP-FILES-SRV01:</span><br/>
                    <span style="margin-left: 15px;">üìä –¢–∞–±–ª–∏—Ü–∞:</span> <code>{self.config.get_excel_file_path()}</code><br/>
                    <span style="margin-left: 15px;">üêç –°–∫—Ä–∏–ø—Ç:</span> <code>{Path(__file__).resolve()}</code> <br/>
                    <span style="">‚è∞ –ó–∞–ø—É—Å–∫:</span> –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –∏–∑ Task Scheduler, –ø—Ä–∞–≤–∏–ª–æ: <code>maintenance_alert.py</code><br/>
                    <span style="">üåê –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥:</span> <a href="https://github.com/SemonoffArt/maintenance_alert" style="color: #18bc9c; text-decoration: none;">GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π</a><br/>
                    <span style="">üìß –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ ({len(self.config.RECIPIENTS)}):</span> {', '.join(self.config.RECIPIENTS)}<br/>
                    <div style="text-align: right; margin-top: 5px; color: #2c3e50; font-size: 10px;">
                        –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
                    </div>
                </div>
            </div>
            """
        )
        html_body = "".join(html_parts)
        return html_body, chart_path

# --- 7. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—á—Ç—ã ---
class EmailSender:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email."""
    def __init__(self, config: Config, logger: DualLogger):
        self.config = config
        self.logger = logger

    def send(self, html_body: str, recipients: List[str], chart_path: Optional[Path] = None, attachment_path: Optional[Path] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —á–µ—Ä–µ–∑ SMTP."""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = MIMEMultipart('related')
            msg['From'] = self.config.SENDER_EMAIL
            msg['To'] = ", ".join(recipients)
            msg['Subject'] = "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"
            alternative = MIMEMultipart('alternative')
            msg.attach(alternative)
            # –î–æ–±–∞–≤–ª—è–µ–º HTML-–∫–æ–Ω—Ç–µ–Ω—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏
            if chart_path and Path(chart_path).exists():
                alternative.attach(MIMEText(html_body, 'html', 'utf-8'))
                with open(chart_path, 'rb') as img_file:
                    img = MIMEImage(img_file.read())
                    img.add_header('Content-ID', '<status_chart>')
                    img.add_header('Content-Disposition', 'inline', filename=Path(chart_path).name)
                    msg.attach(img)
            else:
                alternative.attach(MIMEText(html_body, 'html', 'utf-8'))
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            icon_path = self.config.DATA_DIR / "manky.png"
            if icon_path.exists():
                with open(icon_path, 'rb') as icon_file:
                    icon = MIMEImage(icon_file.read())
                    icon.add_header('Content-ID', '<app_icon>')
                    icon.add_header('Content-Disposition', 'inline', filename='manky.png')
                    msg.attach(icon)
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            icon_path = self.config.DATA_DIR / "manky_alert.png"
            if icon_path.exists():
                with open(icon_path, 'rb') as icon_file:
                    icon = MIMEImage(icon_file.read())
                    icon.add_header('Content-ID', '<app_icon_alert>')
                    icon.add_header('Content-Disposition', 'inline', filename='manky_alert.png')
                    msg.attach(icon)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º maintenance_data.xlsx
            if attachment_path and attachment_path.exists():
                with open(attachment_path, 'rb') as attachment_file:
                    attachment = MIMEBase('application', 'vnd.openxmlformats-officedocument.spreadsheetml.sheet')
                    attachment.set_payload(attachment_file.read())
                    encoders.encode_base64(attachment)
                    attachment.add_header(
                        'Content-Disposition',
                        f'attachment; filename="{attachment_path.name}"'
                    )
                    msg.attach(attachment)
                    self.logger.log(f"üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª: {attachment_path.name}")
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
            server = smtplib.SMTP(self.config.SMTP_SERVER, self.config.SMTP_PORT)
            # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º starttls() –¥–ª—è –ø–æ—Ä—Ç–∞ 25 –±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            server.sendmail(self.config.SENDER_EMAIL, recipients, msg.as_string())
            server.quit()
            self.logger.log(f"‚úÖ –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(recipients)} –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º")
            return True
        except Exception as e:
            self.logger.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: {e}")
            return False

# --- 8. –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---
class MaintenanceAlertApp:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    def __init__(self):
        self.config = Config()
        self.logger = DualLogger(self.config.LOG_FILE)
        self.excel_handler = ExcelHandler(self.config, self.logger)
        self.maintenance_checker = MaintenanceChecker(self.config, self.logger)
        self.statistics_manager = StatisticsManager(self.config, self.logger)
        self.report_generator = ReportGenerator(self.config, self.logger, self.maintenance_checker, self.statistics_manager)
        self.email_sender = EmailSender(self.config, self.logger)

    def show_version(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
        self.logger.log(f"üîß –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ v{self.config.VERSION}")
        self.logger.log(f"üìÖ –î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞: {self.config.RELEASE_DATE}")
        self.logger.log(f"üêç Python: {sys.version.split()[0]}")
        self.logger.log_separator()

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
        self.show_version()
        self.logger.log("üöÄ –ü–†–û–ì–†–ê–ú–ú–ê –ó–ê–ü–£–©–ï–ù–ê")
        self.logger.log("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è...")
        self.logger.log(f"–ü–æ–ª—É—á–∞—Ç–µ–ª–∏: {', '.join(self.config.RECIPIENTS)}")

        alarm_items, warning_items, total_records, status_counts, recalc_success = self.excel_handler.read_data()

        self.logger.log("\n" + "="*60)
        self.logger.log("üìà –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø")
        self.logger.log_separator()
        self.statistics_manager.update_statistics(alarm_items, warning_items, total_records, status_counts)
        self.logger.log_separator()

        total_alarm = sum(len(df) for df in alarm_items) if alarm_items else 0
        total_warning = sum(len(df) for df in warning_items) if warning_items else 0
        self.logger.log(f"\n–ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ:")
        self.logger.log(f"  {self.config.STATUS_URGENT}: {total_alarm}")
        self.logger.log(f"  {self.config.STATUS_WARNING}: {total_warning}")

        if total_alarm == 0 and total_warning == 0:
            self.logger.log("–ù–µ—Ç —Å—Ä–æ—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –í—Å–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ –ø–æ—Ä—è–¥–∫–µ.")
            return

        email_body, chart_path = self.report_generator.create_body(
            alarm_items, warning_items, total_records, status_counts, recalc_success
        )
        self.logger.log("\n–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –ø–∏—Å—å–º–æ:")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª maintenance_data.xlsx —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
        maintenance_data_file = None
        if alarm_items:  # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏
            self.logger.log("üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª maintenance_data.xlsx...")
            maintenance_data_file = self.excel_handler.generate_maintenance_data_file(alarm_items)
            if maintenance_data_file:
                self.logger.log(f"‚úÖ –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤: {maintenance_data_file.name}")
            else:
                self.logger.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª maintenance_data.xlsx")

        self.logger.log(f"\n–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ {len(self.config.RECIPIENTS)} –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º...")
        if self.email_sender.send(email_body, self.config.RECIPIENTS, chart_path, maintenance_data_file):
            self.logger.log("–ü–∏—Å—å–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        else:
            self.logger.log("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–∞")
        self.logger.log("\n\n\n")

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É."""
    app = MaintenanceAlertApp()
    app.run()

if __name__ == "__main__":
    main()